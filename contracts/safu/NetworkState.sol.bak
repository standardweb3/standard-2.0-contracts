pragma solidity ^0.8.17;
import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract NetworkState is Initializable {


    function createCDP(address collateral_, uint cAmount_, uint dAmount_) external override returns(bool success) {
        // get aggregators
        // check position
        require(isValidCDP(collateral_, meter, cAmount_, dAmount_)
        , "IP"); // Invalid Position
        // check rebased supply of meter
        require(isValidSupply(dAmount_), "RB"); // Rebase limited mtr borrow
        // create vault
        // mint ERC721 for vault
        uint256 gIndex = allVaultsLength();
        IV1(v1).mint(_msgSender(), gIndex);
        address vlt = _createVault(gIndex, collateral_, meter, dAmount_);
        // transfer collateral to the vault, manage collateral from there
        TransferHelper.safeTransferFrom(collateral_, _msgSender(), vlt, cAmount_);
        allVaults.push(vlt);
        // mint mtr to the sender
        IStablecoin(meter).mint(_msgSender(), dAmount_);
        return true;
    }

    function createCDPNative(uint dAmount_) payable public {
        // check tests
        require(isValidCDP(WETH, meter, msg.value, dAmount_)
        , "IP"); // Invalid Position
        // check rebased supply of meter
        require(isValidSupply(dAmount_), "RB"); // Rebase limited mtr borrow
        // create vault
        // mint ERC721 for vault
        uint256 gIndex = allVaultsLength();
        IV1(v1).mint(_msgSender(), gIndex);
        address vlt = _createVault(gIndex, WETH, meter, dAmount_);
        // wrap native currency
        IWETH(WETH).deposit{value: address(this).balance}();
        uint256 weth = IERC20Minimal(WETH).balanceOf(address(this));
        // then transfer collateral native currency to the vault, manage collateral from there.
        require(IWETH(WETH).transfer(vlt, weth)); 
        allVaults.push(vlt);
        // mint mtr to the sender
        IStablecoin(meter).mint(_msgSender(), dAmount_);
    }
    


}