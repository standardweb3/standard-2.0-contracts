{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/orderbooks/Orderbook.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IOrderbook.sol\\\";\\nimport \\\"../security/Initializable.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nimport \\\"../libraries/NewOrderLibrary.sol\\\";\\nimport \\\"../libraries/NewOrderLinkedList.sol\\\";\\nimport \\\"../libraries/NewOrderQueue.sol\\\";\\n\\ncontract Orderbook is IOrderbook, Initializable {\\n    using NewOrderLibrary for NewOrderLibrary.Order;\\n    using NewOrderLinkedList for NewOrderLinkedList.PriceLinkedList;\\n    using NewOrderQueue for NewOrderQueue.OrderQueue;\\n\\n    // Pair Struct\\n    struct Pair {\\n        address base;\\n        address quote;\\n        uint256 baseDecimals;\\n        uint256 quoteDecimals;\\n    }\\n\\n    Pair private pair;\\n\\n    NewOrderLinkedList.PriceLinkedList private priceLists;\\n    NewOrderQueue.OrderQueue private orderQueue;\\n    NewOrderLibrary.Order[] public orders;\\n    \\n    function initialize(\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) public initializer {\\n        pair = Pair(base_, quote_, IERC20Minimal(base_).decimals(), IERC20Minimal(quote_).decimals());\\n        orderQueue.engine = engine_;\\n    }\\n\\n    function getOrderDepositAmount(uint256 orderId)\\n        external\\n        view\\n        returns (uint256 depositAmount)\\n    {\\n        return orders[orderId].depositAmount;\\n    }\\n\\n    function placeBid(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external {\\n        /// Create order and save to order book\\n        orderQueue._initialize(price, false);\\n        NewOrderLibrary.Order memory order = NewOrderLibrary._createOrder(owner, false, price, pair.base, amount);\\n        priceLists._insert(false, price);\\n        orderQueue._enqueue(price, false, orders.length);\\n        orders.push(order);\\n        // event\\n    }\\n\\n    function placeAsk(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external {\\n        /// Create order and save to order book\\n        orderQueue._initialize(price, false);\\n        NewOrderLibrary.Order memory order = NewOrderLibrary._createOrder(owner, true, price, pair.quote, amount);\\n        priceLists._insert(true, price);\\n        orderQueue._enqueue(price, true, orders.length);\\n        orders.push(order);\\n        // event\\n    }\\n\\n    function cancelOrder(uint256 orderId, address owner) external {\\n        require(msg.sender == orderQueue.engine, \\\"Only engine can dequeue\\\");\\n        NewOrderLibrary.Order memory order = orders[orderId];\\n        require(order.owner == owner, \\\"Only owner can cancel order\\\");\\n        delete orders[orderId];\\n        TransferHelper.safeTransfer(order.deposit, owner, order.depositAmount);\\n        // event\\n    }\\n\\n    // get required amount for executing the order\\n    function getRequired(uint256 orderId, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        NewOrderLibrary.Order memory order = orders[orderId];\\n        // if order is ask, required amount is quoteAmount / price, converting the number converting decimal from quote to base, otherwise baseAmount * price, converting decimal from base to quote\\n        uint256 pIn = order.isAsk ? (amount*pair.baseDecimals) / (order.price*pair.quoteDecimals)  : (amount*pair.quoteDecimals) * (order.price*pair.baseDecimals);\\n        return pIn / 1e8;\\n    }\\n\\n    function execute(\\n        uint256 orderId,\\n        address sender,\\n        uint256 amount\\n    ) external {\\n        NewOrderLibrary.Order memory order = orders[orderId];\\n        uint256 required = getRequired(orderId, amount);\\n        // if the order is ask order on the base/quote pair\\n        if (order.isAsk) {\\n            // owner is buyer, and sender is seller. if buyer is asking for base asset with quote asset in deposit\\n            // then the converted amount is <base>/<quote> == (baseAmount * 10^qDecimal) / (quoteAmount * 10^bDecimal)\\n            // send deposit as quote asset to seller\\n            TransferHelper.safeTransfer(order.deposit, sender, amount);\\n            // send claimed amount of base asset to buyer\\n            TransferHelper.safeTransfer(pair.base, order.owner, required);\\n        }\\n        // if the order is bid order on the base/quote pair\\n        else {\\n            // owner is seller, and sender is buyer. buyer is asking for quote asset with base asset in deposit\\n            // then the converted amount is <base>/<quote> == depositAmount / claimAmount => claimAmount == depositAmount / price\\n            // send deposit as base asset to buyer\\n            TransferHelper.safeTransfer(order.deposit, order.owner, amount);\\n            // send claimed amount of quote asset to seller\\n            TransferHelper.safeTransfer(pair.quote, sender, amount);\\n        }\\n        uint256 absDiff = (order.depositAmount > amount)\\n            ? (order.depositAmount - amount)\\n            : (amount - order.depositAmount);\\n        if (absDiff <= amount / 1e6) {\\n            delete orders[orderId];\\n        } else {\\n            // update deposit amount\\n            order.depositAmount -= amount;\\n            // update filled amount\\n            order.filled += amount;\\n        }\\n    }\\n    /////////////////////////////////\\n    /// Price linked list methods ///\\n    /////////////////////////////////\\n\\n    function heads() external view returns (uint256, uint256) {\\n        return priceLists._heads();\\n    }\\n\\n    function mktPrice() external view returns (uint256) {\\n        return priceLists._mktPrice();\\n    }\\n    \\n\\n    /////////////////////////////////\\n    ///    Order queue methods    ///\\n    /////////////////////////////////\\n    function isInitialized(uint256 price, bool isAsk)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return !orderQueue._isRaw(price, isAsk);\\n    }\\n\\n    function dequeue(uint256 price, bool isAsk)\\n        external\\n        returns (uint256 orderId)\\n    {\\n        require(msg.sender == orderQueue.engine, \\\"Only engine can dequeue\\\");\\n        require(!orderQueue._isEmpty(price, isAsk), \\\"Queue is empty\\\");\\n        orderId = orderQueue._dequeue(price, isAsk);\\n        if (isAsk) {\\n            if(orderQueue.askOrderQueueIndex[price].first > orderQueue.askOrderQueueIndex[price].last) {\\n                priceLists.askHead = priceLists._next(isAsk, price);\\n            }\\n            return orderId;\\n        } else {\\n            if(orderQueue.bidOrderQueueIndex[price].first > orderQueue.bidOrderQueueIndex[price].last) {\\n                priceLists.bidHead = priceLists._next(isAsk, price);\\n            }\\n            return orderId;\\n        }\\n    }\\n\\n    function length(uint256 price, bool isAsk) public view returns (uint256) {\\n        return orderQueue._length(price, isAsk);\\n    }\\n\\n    function isEmpty(uint256 price, bool isAsk) public view returns (bool) {\\n        return orderQueue._isEmpty(price, isAsk);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/interfaces/IOrderbook.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\ninterface IOrderbook {\\n    function initialize(\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) external;\\n\\n    function dequeue(uint256 price, bool isAsk)\\n        external\\n        returns (uint256 orderId);\\n\\n    function mktPrice() external view returns (uint256);\\n\\n    function length(uint256 price, bool isAsk) external view returns (uint256);\\n\\n    function isEmpty(uint256 price, bool isAsk) external view returns (bool);\\n\\n    function getOrderDepositAmount(uint256 orderId) external view returns (uint256 depositAmount); \\n\\n    function placeAsk(address owner, uint256 price, uint256 amount) external;\\n\\n    function placeBid(address owner, uint256 price, uint256 amount) external;\\n\\n    function execute(uint256 orderId, address sender, uint256 amount) external;\\n\\n    function heads() external view returns (uint256 askHead, uint256 bidHead);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/security/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\ncontract Initializable {\\n    bool private _initialized = false;\\n\\n    modifier initializer() {\\n        // solhint-disable-next-line reason-string\\n        require(!_initialized);\\n        _;\\n        _initialized = true;\\n    }\\n\\n    function initialized() external view returns (bool) {\\n        return _initialized;\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AF\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TF\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TFF\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"ETF\\\");\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Minimal {\\n    function decimals() external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/NewOrderLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nlibrary NewOrderLibrary {\\n    // Order struct\\n    struct Order {\\n        address owner;\\n        bool isAsk;\\n        uint256 price;\\n        address deposit;\\n        uint256 depositAmount;\\n        uint256 filled;\\n    }\\n\\n    function _createOrder(\\n        address owner_,\\n        bool isAsk_,\\n        uint256 price_,\\n        address deposit_,\\n        uint256 depositAmount_\\n    ) internal pure returns (Order memory order) {\\n        order = Order({\\n            owner: owner_,\\n            isAsk: isAsk_,\\n            price: price_,\\n            deposit: deposit_,\\n            depositAmount: depositAmount_,\\n            filled: 0\\n        });\\n        return order;\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/NewOrderLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nlibrary NewOrderLinkedList {\\n\\n    struct PriceLinkedList {\\n    /// Hashmap-style linked list of prices to route orders\\n    // key: price, value: next_price (next_price > price)\\n    mapping(uint256 => uint256) bidPrices;\\n    // key: price, value: next_price (next_price < price)\\n    mapping(uint256 => uint256) askPrices;\\n\\n    // Head of the bid price linked list(i.e. highest bid price)\\n    uint256 bidHead;\\n    // Head of the ask price linked list(i.e. lowest ask price)\\n    uint256 askHead;\\n    }\\n\\n\\n    function _heads(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256, uint256) {\\n        return (self.bidHead, self.askHead);\\n    }\\n\\n    function _mktPrice(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256) {\\n        require(self.bidHead > 0 && self.askHead > 0, \\\"No orders matched yet\\\");\\n        return (self.bidHead + self.askHead) / 2;\\n    }\\n\\n    function _next(PriceLinkedList storage self, bool isAsk, uint256 price) internal view returns (uint256) {\\n        if (isAsk) {\\n            return self.askPrices[price];\\n        } else {\\n            return self.bidPrices[price];\\n        }\\n    }\\n\\n    // for askPrices, lower ones are next, for bidPrices, higher ones are next\\n    function _insert(PriceLinkedList storage self, bool isAsk, uint256 price) internal {\\n        // insert ask price to the linked list\\n        if (isAsk) {\\n            if (self.askHead == 0) {\\n                self.askHead = price;\\n                return;\\n            }\\n            uint256 last = self.askHead;\\n            // Traverse through list until we find the right spot\\n            while (price < last) {\\n                last = self.askPrices[last];\\n            }\\n            // what if price is the lowest?\\n            // last is zero because it is null in solidity\\n            if (last == 0) {\\n                self.askPrices[price] = last;\\n                self.askHead = price;\\n            }\\n            // what if price is in the middle of the list?\\n            else if (self.askPrices[last] < price) {\\n                self.askPrices[price] = self.askPrices[last];\\n                self.askPrices[last] = price;\\n            }\\n            // what if price is already included?\\n            else if (price == last) {\\n                // do nothing\\n            }\\n            // what if price is the highest?\\n            else {\\n                self.askPrices[price] = last;\\n            }\\n        }\\n        // insert bid price to the linked list\\n        else {\\n            if (self.bidHead == 0) {\\n                self.bidHead = price;\\n                return;\\n            }\\n            uint256 last = self.bidHead;\\n            // Traverse through list until we find the right spot\\n            while (price > last) {\\n                last = self.bidPrices[last];\\n            }\\n            // what if price is the highest?\\n            if (last == 0) {\\n                self.bidPrices[price] = last;\\n                self.bidHead = price;\\n            }\\n            // what if price is in the middle of the list?\\n            else if (self.bidPrices[last] > price) {\\n                self.bidPrices[price] = self.bidPrices[last];\\n                self.bidPrices[last] = price;\\n            }\\n            // what if price is the lowest?\\n            else {\\n                self.bidPrices[price] = last;\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/NewOrderQueue.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nlibrary NewOrderQueue {\\n\\n    struct QueueIndex {\\n        uint first;\\n        uint last;\\n    }\\n\\n    struct OrderQueue {\\n         // Ask Order book storage (key: (Price, Index), value: orderId)\\n    mapping(bytes32 => uint256) askOrderQueue;\\n    // Ask Order book queue's indices (key: Price, value: first and last index of orders by price)\\n    mapping(uint256 => QueueIndex) askOrderQueueIndex;\\n    // Bid Order book storage (key: (Price, Index), value: orderId)\\n    mapping(bytes32 => uint256) bidOrderQueue;\\n    // Bid Order book queue's indices (key: Price, value: first and last index of orders by price)\\n    mapping(uint256 => QueueIndex) bidOrderQueueIndex;\\n    address engine;\\n    }\\n\\n    function _getOrderKey(uint256 price, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(price, index));\\n    }\\n\\n    function _initialize(OrderQueue storage self, uint256 price, bool isAsk) internal {\\n        if(!_isRaw(self, price, isAsk)) { return; }\\n        if (isAsk) {\\n            self.askOrderQueueIndex[price] = QueueIndex({\\n                first: 1,\\n                last: 0\\n            }); \\n        } else {\\n            self.bidOrderQueueIndex[price] = QueueIndex({\\n                first: 1,\\n                last: 0\\n            }); \\n        }\\n    }\\n\\n    function _isRaw(OrderQueue storage self, uint256 price, bool isAsk)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (isAsk) {\\n            return self.askOrderQueueIndex[price].first == 0 &&\\n                self.askOrderQueueIndex[price].last == 0;\\n        } else {\\n            return self.bidOrderQueueIndex[price].first == 0 && \\n                self.bidOrderQueueIndex[price].last == 0;\\n        }\\n    }\\n\\n    function _initializeQueue(OrderQueue storage self, uint256 price, bool isAsk) internal {\\n        if (isAsk) {\\n            self.askOrderQueueIndex[price].first = 1;\\n            self.askOrderQueueIndex[price].last = 0;\\n        } else {\\n            self.bidOrderQueueIndex[price].first = 1;\\n            self.bidOrderQueueIndex[price].last = 0;\\n        }\\n    }\\n\\n    function _enqueue(\\n        OrderQueue storage self,\\n        uint256 price,\\n        bool isAsk,\\n        uint256 orderId\\n    ) internal {\\n        if (isAsk) {\\n            self.askOrderQueueIndex[price].last += 1;\\n            self.askOrderQueue[_getOrderKey(price, self.askOrderQueueIndex[price].last)] = orderId;\\n        } else {\\n            self.bidOrderQueueIndex[price].last += 1;\\n            self.bidOrderQueue[_getOrderKey(price, self.bidOrderQueueIndex[price].last)] = orderId;\\n        }\\n    }\\n\\n    function _dequeue(OrderQueue storage self, uint256 price, bool isAsk)\\n        internal\\n        returns (uint256 orderId)\\n    {\\n        require(msg.sender == self.engine, \\\"Only engine can dequeue\\\");\\n        require(!_isEmpty(self, price, isAsk), \\\"Queue is empty\\\");\\n        if (isAsk) {\\n            orderId = self.askOrderQueue[_getOrderKey(price, self.askOrderQueueIndex[price].first)];\\n            delete self.askOrderQueue[_getOrderKey(price, self.askOrderQueueIndex[price].first)];\\n            self.askOrderQueueIndex[price].first += 1;\\n            return orderId;\\n        } else {\\n            orderId = self.bidOrderQueue[_getOrderKey(price, self.bidOrderQueueIndex[price].first)];\\n            delete self.bidOrderQueue[_getOrderKey(price, self.bidOrderQueueIndex[price].first)];\\n            self.bidOrderQueueIndex[price].first += 1;\\n            return orderId;\\n        }\\n    }\\n\\n    function _length(OrderQueue storage self, uint256 price, bool isAsk) internal view returns (uint256) {\\n        if (isAsk) {\\n            if (self.askOrderQueueIndex[price].first > self.askOrderQueueIndex[price].last) {\\n                return 0;\\n            } else {\\n                return self.askOrderQueueIndex[price].last - self.askOrderQueueIndex[price].first + 1;\\n            }\\n        } else {\\n            if (self.bidOrderQueueIndex[price].first > self.bidOrderQueueIndex[price].last) {\\n                return 0;\\n            } else {\\n                return self.bidOrderQueueIndex[price].last - self.bidOrderQueueIndex[price].first + 1;\\n            }\\n        }\\n    }\\n\\n    function _isEmpty(OrderQueue storage self, uint256 price, bool isAsk) internal view returns (bool) {\\n        return _length(self, price, isAsk) == 0 || _isRaw(self, price, isAsk);\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"}}}","address":"0xc22b206838647E53Fd92eB31BA23ce17C86169DD","bytecode":"0x60806040526000805460ff1916905534801561001a57600080fd5b50611aca8061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a6628f4e11610097578063c0c53b8b11610066578063c0c53b8b14610230578063c45e0ae614610243578063dc1a804f14610256578063ee7ab7c91461026957600080fd5b8063a6628f4e14610191578063a85c38ef146101a4578063b8b2383114610202578063bd25b9c41461021d57600080fd5b806332b6fede116100d357806332b6fede1461014257806337632e3a14610163578063420be8a51461016b5780637323a7d31461017e57600080fd5b806304717aca146100fa5780630582b7ef1461010f578063158ef93e14610137575b600080fd5b61010d6101083660046117cb565b61027c565b005b61012261011d36600461180f565b610499565b60405190151581526020015b60405180910390f35b60005460ff16610122565b61015561015036600461180f565b6104b0565b60405190815260200161012e565b6101556104be565b61015561017936600461180f565b6104cf565b61010d61018c36600461183f565b61063e565b61012261019f36600461180f565b61086b565b6101b76101b236600461186b565b610881565b6040805173ffffffffffffffffffffffffffffffffffffffff9788168152951515602087015285019390935293166060830152608082019290925260a081019190915260c00161012e565b6007546008546040805192835260208301919091520161012e565b61010d61022b3660046117cb565b6108f9565b61010d61023e366004611884565b6109a6565b61010d6102513660046118c7565b610b88565b6101556102643660046118fc565b610db4565b61015561027736600461186b565b610eca565b6102896009836000610ef8565b6001546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c168652928501849052958401899052951694820194909452918201849052810182905290506103126005600085610f76565b600e546103269060099085906000906110ed565b600e8054600181018255600091909152815160059091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd810180546020850151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9485161717905560408301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe82015560608301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff82018054919093167fffffffffffffffffffffffff0000000000000000000000000000000000000000919091161790915560808201517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40082015560a0909101517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40190910155505050565b60006104a7600984846111e5565b90505b92915050565b60006104a76009848461120e565b60006104ca60056112b6565b905090565b600d5460009073ffffffffffffffffffffffffffffffffffffffff163314610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e206465717565756500000000000000000060448201526064015b60405180910390fd5b610564600984846111e5565b156105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b6105d760098484611355565b9050811561060f576000838152600a6020526040902060018101549054111561060a576106066005838561158e565b6008555b6104aa565b6000838152600c6020526040902060018101549054111561060a576106366005838561158e565b6007556104aa565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146106bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6000600e83815481106106d4576106d461191e565b60009182526020918290206040805160c081018252600593909302909101805473ffffffffffffffffffffffffffffffffffffffff8082168086527401000000000000000000000000000000000000000090920460ff16151595850195909552600182015492840192909252600281015484166060840152600381015460808401526004015460a0830152909250908316146107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79206f776e65722063616e2063616e63656c206f726465720000000000604482015260640161054f565b600e83815481106107df576107df61191e565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600381018290556004015560608101516080820151610866919084906115c2565b505050565b600061087960098484611732565b159392505050565b600e818154811061089157600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff80851696507401000000000000000000000000000000000000000090940460ff16949293909116919086565b6109066009836000610ef8565b6002546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c168652600193860193909352958401899052951694820194909452918201849052810182905290506109926005600185610f76565b600e546103269060099085906001906110ed565b60005460ff16156109b657600080fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a68919061194d565b81526020018373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc919061194d565b90528051600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617825560208401516002805483169185169190911790556040840151600355606090930151600455600d805490931693909116929092179055600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555050565b6000600e8481548110610b9d57610b9d61191e565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff1615159385019390935260018101549184019190915260028101549091166060830152600381015460808301526004015460a08201529150610c338584610db4565b9050816020015115610c7957610c4e826060015185856115c2565b6001548251610c749173ffffffffffffffffffffffffffffffffffffffff1690836115c2565b610cb0565b610c8c82606001518360000151856115c2565b600254610cb09073ffffffffffffffffffffffffffffffffffffffff1685856115c2565b600083836080015111610cd1576080830151610ccc9085611995565b610ce1565b838360800151610ce19190611995565b9050610cf0620f4240856119ac565b8111610d7f57600e8681548110610d0957610d0961191e565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810182905560040155610dac565b8383608001818151610d919190611995565b90525060a083018051859190610da89083906119e7565b9052505b505050505050565b600080600e8481548110610dca57610dca61191e565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff16151593850184905260018201549285019290925260028101549091166060840152600381015460808401526004015460a0830152909250610e88576003546040830151610e6c91906119ff565b600454610e7990866119ff565b610e8391906119ff565b610eb1565b6004546040830151610e9a91906119ff565b600354610ea790866119ff565b610eb191906119ac565b9050610ec16305f5e100826119ac565b95945050505050565b6000600e8281548110610edf57610edf61191e565b9060005260206000209060050201600301549050919050565b610f03838383611732565b610f0c57505050565b8015610f43575060408051808201825260018082526000602080840182815295825295820190955291909320925183559051910155565b60408051808201825260018082526000602080840182815287835260038901909152939020915182559151910155505050565b8115611041576003830154610f915760039092019190915550565b60038301545b80821015610fb5576000908152600184016020526040902054610f97565b80610fd957600082815260018501602052604090208190556003840182905561103b565b600081815260018501602052604090205482111561101a5760008181526001850160205260408082208054858452918320919091559082905282905561103b565b808214156110275761103b565b600082815260018501602052604090208190555b50505050565b60028301546110565760029092019190915550565b60028301545b808211156110785760009081526020849052604090205461105c565b8061109a5760008281526020859052604090208190556002840182905561103b565b6000818152602085905260409020548210156110d7576000818152602085905260408082208054858452918320919091559082905282905561103b565b6000918252602093909352604090209190915550565b811561116857600083815260018581016020526040822081018054919290916111179084906119e7565b9091555050600083815260018581016020908152604080842090920154825180830188905280840191909152825180820384018152606090910183528051908201208352869052902081905561103b565b6001846003016000858152602001908152602001600020600101600082825461119191906119e7565b90915550506000838152600385016020908152604080832060010154815180840197909752868201528051808703820181526060909601815285519582019590952082526002909501909452919092205550565b60006111f284848461120e565b15806112045750611204848484611732565b90505b9392505050565b6000811561126f57600083815260018086016020526040909120908101549054111561123c57506000611207565b600083815260018086016020526040909120805491015461125d9190611995565b6112689060016119e7565b9050611207565b6000838152600385016020526040902060018101549054111561129457506000611207565b60008381526003850160205260409020805460019091015461125d9190611995565b60008082600201541180156112cf575060008260030154115b611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f206f7264657273206d617463686564207965740000000000000000000000604482015260640161054f565b60028260030154836002015461134b91906119e7565b6104aa91906119ac565b600483015460009073ffffffffffffffffffffffffffffffffffffffff1633146113db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6113e68484846111e5565b1561144d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b81156114f357506000828152600184810160208181526040808520805482518085018a905280840182905283518082038501815260608201855280519086012088528a8552838820548a8952868652608082018b905260a0808301939093528451808303909301835260c0909101845281519185019190912087528984529186208690558786529290915281549093906114e89084906119e7565b909155506112079050565b506000828152600384016020818152604080842080548251808501899052808401829052835180820385018152606082018552805190860120875260028a01808652848820548a8952878752608083018b905260a0808401949094528551808403909401845260c0909201855282519286019290922087529084529185208590558685529290915281549092600192916114e89084906119e7565b600082156115ad57506000818152600184016020526040902054611207565b50600081815260208490526040902054611207565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916116599190611a3c565b6000604051808303816000865af19150503d8060008114611696576040519150601f19603f3d011682016040523d82523d6000602084013e61169b565b606091505b50915091508180156116c55750805115806116c55750808060200190518101906116c59190611a77565b61172b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5446000000000000000000000000000000000000000000000000000000000000604482015260640161054f565b5050505050565b6000811561176e576000838152600185016020526040902054158015611268575050600082815260018481016020526040909120015415611207565b6000838152600385016020526040902054158015611268575050600082815260038401602052604090206001015415611207565b803573ffffffffffffffffffffffffffffffffffffffff811681146117c657600080fd5b919050565b6000806000606084860312156117e057600080fd5b6117e9846117a2565b95602085013595506040909401359392505050565b801515811461180c57600080fd5b50565b6000806040838503121561182257600080fd5b823591506020830135611834816117fe565b809150509250929050565b6000806040838503121561185257600080fd5b82359150611862602084016117a2565b90509250929050565b60006020828403121561187d57600080fd5b5035919050565b60008060006060848603121561189957600080fd5b6118a2846117a2565b92506118b0602085016117a2565b91506118be604085016117a2565b90509250925092565b6000806000606084860312156118dc57600080fd5b833592506118ec602085016117a2565b9150604084013590509250925092565b6000806040838503121561190f57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561195f57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156119a7576119a7611966565b500390565b6000826119e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156119fa576119fa611966565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a3757611a37611966565b500290565b6000825160005b81811015611a5d5760208186018101518583015201611a43565b81811115611a6c576000828501525b509190910192915050565b600060208284031215611a8957600080fd5b8151611207816117fe56fea2646970667358221220816b1f50e32c9c2a3e39e76da08d93568815920c2c0556fd4e5de9fcb6b8691964736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a6628f4e11610097578063c0c53b8b11610066578063c0c53b8b14610230578063c45e0ae614610243578063dc1a804f14610256578063ee7ab7c91461026957600080fd5b8063a6628f4e14610191578063a85c38ef146101a4578063b8b2383114610202578063bd25b9c41461021d57600080fd5b806332b6fede116100d357806332b6fede1461014257806337632e3a14610163578063420be8a51461016b5780637323a7d31461017e57600080fd5b806304717aca146100fa5780630582b7ef1461010f578063158ef93e14610137575b600080fd5b61010d6101083660046117cb565b61027c565b005b61012261011d36600461180f565b610499565b60405190151581526020015b60405180910390f35b60005460ff16610122565b61015561015036600461180f565b6104b0565b60405190815260200161012e565b6101556104be565b61015561017936600461180f565b6104cf565b61010d61018c36600461183f565b61063e565b61012261019f36600461180f565b61086b565b6101b76101b236600461186b565b610881565b6040805173ffffffffffffffffffffffffffffffffffffffff9788168152951515602087015285019390935293166060830152608082019290925260a081019190915260c00161012e565b6007546008546040805192835260208301919091520161012e565b61010d61022b3660046117cb565b6108f9565b61010d61023e366004611884565b6109a6565b61010d6102513660046118c7565b610b88565b6101556102643660046118fc565b610db4565b61015561027736600461186b565b610eca565b6102896009836000610ef8565b6001546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c168652928501849052958401899052951694820194909452918201849052810182905290506103126005600085610f76565b600e546103269060099085906000906110ed565b600e8054600181018255600091909152815160059091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd810180546020850151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9485161717905560408301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe82015560608301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff82018054919093167fffffffffffffffffffffffff0000000000000000000000000000000000000000919091161790915560808201517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40082015560a0909101517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40190910155505050565b60006104a7600984846111e5565b90505b92915050565b60006104a76009848461120e565b60006104ca60056112b6565b905090565b600d5460009073ffffffffffffffffffffffffffffffffffffffff163314610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e206465717565756500000000000000000060448201526064015b60405180910390fd5b610564600984846111e5565b156105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b6105d760098484611355565b9050811561060f576000838152600a6020526040902060018101549054111561060a576106066005838561158e565b6008555b6104aa565b6000838152600c6020526040902060018101549054111561060a576106366005838561158e565b6007556104aa565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146106bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6000600e83815481106106d4576106d461191e565b60009182526020918290206040805160c081018252600593909302909101805473ffffffffffffffffffffffffffffffffffffffff8082168086527401000000000000000000000000000000000000000090920460ff16151595850195909552600182015492840192909252600281015484166060840152600381015460808401526004015460a0830152909250908316146107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79206f776e65722063616e2063616e63656c206f726465720000000000604482015260640161054f565b600e83815481106107df576107df61191e565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600381018290556004015560608101516080820151610866919084906115c2565b505050565b600061087960098484611732565b159392505050565b600e818154811061089157600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff80851696507401000000000000000000000000000000000000000090940460ff16949293909116919086565b6109066009836000610ef8565b6002546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c168652600193860193909352958401899052951694820194909452918201849052810182905290506109926005600185610f76565b600e546103269060099085906001906110ed565b60005460ff16156109b657600080fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a68919061194d565b81526020018373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc919061194d565b90528051600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617825560208401516002805483169185169190911790556040840151600355606090930151600455600d805490931693909116929092179055600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555050565b6000600e8481548110610b9d57610b9d61191e565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff1615159385019390935260018101549184019190915260028101549091166060830152600381015460808301526004015460a08201529150610c338584610db4565b9050816020015115610c7957610c4e826060015185856115c2565b6001548251610c749173ffffffffffffffffffffffffffffffffffffffff1690836115c2565b610cb0565b610c8c82606001518360000151856115c2565b600254610cb09073ffffffffffffffffffffffffffffffffffffffff1685856115c2565b600083836080015111610cd1576080830151610ccc9085611995565b610ce1565b838360800151610ce19190611995565b9050610cf0620f4240856119ac565b8111610d7f57600e8681548110610d0957610d0961191e565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810182905560040155610dac565b8383608001818151610d919190611995565b90525060a083018051859190610da89083906119e7565b9052505b505050505050565b600080600e8481548110610dca57610dca61191e565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff16151593850184905260018201549285019290925260028101549091166060840152600381015460808401526004015460a0830152909250610e88576003546040830151610e6c91906119ff565b600454610e7990866119ff565b610e8391906119ff565b610eb1565b6004546040830151610e9a91906119ff565b600354610ea790866119ff565b610eb191906119ac565b9050610ec16305f5e100826119ac565b95945050505050565b6000600e8281548110610edf57610edf61191e565b9060005260206000209060050201600301549050919050565b610f03838383611732565b610f0c57505050565b8015610f43575060408051808201825260018082526000602080840182815295825295820190955291909320925183559051910155565b60408051808201825260018082526000602080840182815287835260038901909152939020915182559151910155505050565b8115611041576003830154610f915760039092019190915550565b60038301545b80821015610fb5576000908152600184016020526040902054610f97565b80610fd957600082815260018501602052604090208190556003840182905561103b565b600081815260018501602052604090205482111561101a5760008181526001850160205260408082208054858452918320919091559082905282905561103b565b808214156110275761103b565b600082815260018501602052604090208190555b50505050565b60028301546110565760029092019190915550565b60028301545b808211156110785760009081526020849052604090205461105c565b8061109a5760008281526020859052604090208190556002840182905561103b565b6000818152602085905260409020548210156110d7576000818152602085905260408082208054858452918320919091559082905282905561103b565b6000918252602093909352604090209190915550565b811561116857600083815260018581016020526040822081018054919290916111179084906119e7565b9091555050600083815260018581016020908152604080842090920154825180830188905280840191909152825180820384018152606090910183528051908201208352869052902081905561103b565b6001846003016000858152602001908152602001600020600101600082825461119191906119e7565b90915550506000838152600385016020908152604080832060010154815180840197909752868201528051808703820181526060909601815285519582019590952082526002909501909452919092205550565b60006111f284848461120e565b15806112045750611204848484611732565b90505b9392505050565b6000811561126f57600083815260018086016020526040909120908101549054111561123c57506000611207565b600083815260018086016020526040909120805491015461125d9190611995565b6112689060016119e7565b9050611207565b6000838152600385016020526040902060018101549054111561129457506000611207565b60008381526003850160205260409020805460019091015461125d9190611995565b60008082600201541180156112cf575060008260030154115b611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f206f7264657273206d617463686564207965740000000000000000000000604482015260640161054f565b60028260030154836002015461134b91906119e7565b6104aa91906119ac565b600483015460009073ffffffffffffffffffffffffffffffffffffffff1633146113db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6113e68484846111e5565b1561144d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b81156114f357506000828152600184810160208181526040808520805482518085018a905280840182905283518082038501815260608201855280519086012088528a8552838820548a8952868652608082018b905260a0808301939093528451808303909301835260c0909101845281519185019190912087528984529186208690558786529290915281549093906114e89084906119e7565b909155506112079050565b506000828152600384016020818152604080842080548251808501899052808401829052835180820385018152606082018552805190860120875260028a01808652848820548a8952878752608083018b905260a0808401949094528551808403909401845260c0909201855282519286019290922087529084529185208590558685529290915281549092600192916114e89084906119e7565b600082156115ad57506000818152600184016020526040902054611207565b50600081815260208490526040902054611207565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916116599190611a3c565b6000604051808303816000865af19150503d8060008114611696576040519150601f19603f3d011682016040523d82523d6000602084013e61169b565b606091505b50915091508180156116c55750805115806116c55750808060200190518101906116c59190611a77565b61172b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5446000000000000000000000000000000000000000000000000000000000000604482015260640161054f565b5050505050565b6000811561176e576000838152600185016020526040902054158015611268575050600082815260018481016020526040909120015415611207565b6000838152600385016020526040902054158015611268575050600082815260038401602052604090206001015415611207565b803573ffffffffffffffffffffffffffffffffffffffff811681146117c657600080fd5b919050565b6000806000606084860312156117e057600080fd5b6117e9846117a2565b95602085013595506040909401359392505050565b801515811461180c57600080fd5b50565b6000806040838503121561182257600080fd5b823591506020830135611834816117fe565b809150509250929050565b6000806040838503121561185257600080fd5b82359150611862602084016117a2565b90509250929050565b60006020828403121561187d57600080fd5b5035919050565b60008060006060848603121561189957600080fd5b6118a2846117a2565b92506118b0602085016117a2565b91506118be604085016117a2565b90509250925092565b6000806000606084860312156118dc57600080fd5b833592506118ec602085016117a2565b9150604084013590509250925092565b6000806040838503121561190f57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561195f57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156119a7576119a7611966565b500390565b6000826119e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156119fa576119fa611966565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a3757611a37611966565b500290565b6000825160005b81811015611a5d5760208186018101518583015201611a43565b81811115611a6c576000828501525b509190910192915050565b600060208284031215611a8957600080fd5b8151611207816117fe56fea2646970667358221220816b1f50e32c9c2a3e39e76da08d93568815920c2c0556fd4e5de9fcb6b8691964736f6c634300080a0033","abi":[{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"dequeue","outputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"getOrderDepositAmount","outputs":[{"internalType":"uint256","name":"depositAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getRequired","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"heads","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"base_","type":"address"},{"internalType":"address","name":"quote_","type":"address"},{"internalType":"address","name":"engine_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"isEmpty","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"isInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"length","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mktPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"orders","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"bool","name":"isAsk","type":"bool"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"deposit","type":"address"},{"internalType":"uint256","name":"depositAmount","type":"uint256"},{"internalType":"uint256","name":"filled","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"placeAsk","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"placeBid","outputs":[],"stateMutability":"nonpayable","type":"function"}]}