{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/orderbooks/Orderbook.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IOrderbook.sol\\\";\\nimport \\\"../security/Initializable.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nimport \\\"../libraries/NewOrderLibrary.sol\\\";\\nimport \\\"../libraries/NewOrderLinkedList.sol\\\";\\nimport \\\"../libraries/NewOrderQueue.sol\\\";\\n\\ncontract Orderbook is IOrderbook, Initializable {\\n    using NewOrderLibrary for NewOrderLibrary.Order;\\n    using NewOrderLinkedList for NewOrderLinkedList.PriceLinkedList;\\n    using NewOrderQueue for NewOrderQueue.OrderQueue;\\n\\n    // Pair Struct\\n    struct Pair {\\n        address base;\\n        address quote;\\n        uint256 baseDecimals;\\n        uint256 quoteDecimals;\\n    }\\n\\n    Pair private pair;\\n\\n    NewOrderLinkedList.PriceLinkedList private priceLists;\\n    NewOrderQueue.OrderQueue private orderQueue;\\n    NewOrderLibrary.Order[] public orders;\\n    \\n    function initialize(\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) public initializer {\\n        pair = Pair(base_, quote_, IERC20Minimal(base_).decimals(), IERC20Minimal(quote_).decimals());\\n        orderQueue.engine = engine_;\\n    }\\n\\n    function getOrderDepositAmount(uint256 orderId)\\n        external\\n        view\\n        returns (uint256 depositAmount)\\n    {\\n        return orders[orderId].depositAmount;\\n    }\\n\\n    function placeBid(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external {\\n        /// Create order and save to order book\\n        orderQueue._initialize(price, false);\\n        NewOrderLibrary.Order memory order = NewOrderLibrary._createOrder(owner, false, price, pair.base, amount);\\n        priceLists._insert(false, price);\\n        orderQueue._enqueue(price, false, orders.length);\\n        orders.push(order);\\n        // event\\n    }\\n\\n    function placeAsk(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external {\\n        /// Create order and save to order book\\n        orderQueue._initialize(price, false);\\n        NewOrderLibrary.Order memory order = NewOrderLibrary._createOrder(owner, true, price, pair.quote, amount);\\n        priceLists._insert(true, price);\\n        orderQueue._enqueue(price, true, orders.length);\\n        orders.push(order);\\n        // event\\n    }\\n\\n    function cancelOrder(uint256 orderId, address owner) external {\\n        require(msg.sender == orderQueue.engine, \\\"Only engine can dequeue\\\");\\n        NewOrderLibrary.Order memory order = orders[orderId];\\n        require(order.owner == owner, \\\"Only owner can cancel order\\\");\\n        delete orders[orderId];\\n        TransferHelper.safeTransfer(order.deposit, owner, order.depositAmount);\\n        // event\\n    }\\n\\n    // get required amount for executing the order\\n    function getRequired(uint256 orderId, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        NewOrderLibrary.Order memory order = orders[orderId];\\n        // if order is ask, required amount is quoteAmount / price, converting the number converting decimal from quote to base, otherwise baseAmount * price, converting decimal from base to quote\\n        uint256 pIn = order.isAsk ? (amount*pair.baseDecimals) / (order.price*pair.quoteDecimals)  : (amount*pair.quoteDecimals) * (order.price*pair.baseDecimals);\\n        return pIn / 1e8;\\n    }\\n\\n    function execute(\\n        uint256 orderId,\\n        address sender,\\n        uint256 amount\\n    ) external {\\n        NewOrderLibrary.Order memory order = orders[orderId];\\n        uint256 required = getRequired(orderId, amount);\\n        // if the order is ask order on the base/quote pair\\n        if (order.isAsk) {\\n            // owner is buyer, and sender is seller. if buyer is asking for base asset with quote asset in deposit\\n            // then the converted amount is <base>/<quote> == (baseAmount * 10^qDecimal) / (quoteAmount * 10^bDecimal)\\n            // send deposit as quote asset to seller\\n            TransferHelper.safeTransfer(order.deposit, sender, amount);\\n            // send claimed amount of base asset to buyer\\n            TransferHelper.safeTransfer(pair.base, order.owner, required);\\n        }\\n        // if the order is bid order on the base/quote pair\\n        else {\\n            // owner is seller, and sender is buyer. buyer is asking for quote asset with base asset in deposit\\n            // then the converted amount is <base>/<quote> == depositAmount / claimAmount => claimAmount == depositAmount / price\\n            // send deposit as base asset to buyer\\n            TransferHelper.safeTransfer(order.deposit, order.owner, amount);\\n            // send claimed amount of quote asset to seller\\n            TransferHelper.safeTransfer(pair.quote, sender, amount);\\n        }\\n        uint256 absDiff = (order.depositAmount > amount)\\n            ? (order.depositAmount - amount)\\n            : (amount - order.depositAmount);\\n        if (absDiff <= amount / 1e6) {\\n            delete orders[orderId];\\n        } else {\\n            // update deposit amount\\n            order.depositAmount -= amount;\\n            // update filled amount\\n            order.filled += amount;\\n        }\\n    }\\n    /////////////////////////////////\\n    /// Price linked list methods ///\\n    /////////////////////////////////\\n\\n    function heads() external view returns (uint256, uint256) {\\n        return priceLists._heads();\\n    }\\n\\n    function mktPrice() external view returns (uint256) {\\n        return priceLists._mktPrice();\\n    }\\n    \\n\\n    /////////////////////////////////\\n    ///    Order queue methods    ///\\n    /////////////////////////////////\\n    function isInitialized(uint256 price, bool isAsk)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return orderQueue._isInitialized(price, isAsk);\\n    }\\n\\n    function dequeue(uint256 price, bool isAsk)\\n        external\\n        returns (uint256 orderId)\\n    {\\n        require(msg.sender == orderQueue.engine, \\\"Only engine can dequeue\\\");\\n        require(!orderQueue._isEmpty(price, isAsk), \\\"Queue is empty\\\");\\n        orderId = orderQueue._dequeue(price, isAsk);\\n        if (isAsk) {\\n            if(orderQueue.askOrderQueueIndex[price].first > orderQueue.askOrderQueueIndex[price].last) {\\n                priceLists.askHead = priceLists._next(isAsk, price);\\n            }\\n            return orderId;\\n        } else {\\n            if(orderQueue.bidOrderQueueIndex[price].first > orderQueue.bidOrderQueueIndex[price].last) {\\n                priceLists.bidHead = priceLists._next(isAsk, price);\\n            }\\n            return orderId;\\n        }\\n    }\\n\\n    function length(uint256 price, bool isAsk) public view returns (uint256) {\\n        return orderQueue._length(price, isAsk);\\n    }\\n\\n    function isEmpty(uint256 price, bool isAsk) public view returns (bool) {\\n        return orderQueue._isEmpty(price, isAsk);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/interfaces/IOrderbook.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\ninterface IOrderbook {\\n    function initialize(\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) external;\\n\\n    function dequeue(uint256 price, bool isAsk)\\n        external\\n        returns (uint256 orderId);\\n\\n    function mktPrice() external view returns (uint256);\\n\\n    function length(uint256 price, bool isAsk) external view returns (uint256);\\n\\n    function isEmpty(uint256 price, bool isAsk) external view returns (bool);\\n\\n    function getOrderDepositAmount(uint256 orderId) external view returns (uint256 depositAmount); \\n\\n    function placeAsk(address owner, uint256 price, uint256 amount) external;\\n\\n    function placeBid(address owner, uint256 price, uint256 amount) external;\\n\\n    function execute(uint256 orderId, address sender, uint256 amount) external;\\n\\n    function heads() external view returns (uint256 askHead, uint256 bidHead);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/security/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\ncontract Initializable {\\n    bool private _initialized = false;\\n\\n    modifier initializer() {\\n        // solhint-disable-next-line reason-string\\n        require(!_initialized);\\n        _;\\n        _initialized = true;\\n    }\\n\\n    function initialized() external view returns (bool) {\\n        return _initialized;\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AF\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TF\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TFF\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"ETF\\\");\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Minimal {\\n    function decimals() external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/NewOrderLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nlibrary NewOrderLibrary {\\n    // Order struct\\n    struct Order {\\n        address owner;\\n        bool isAsk;\\n        uint256 price;\\n        address deposit;\\n        uint256 depositAmount;\\n        uint256 filled;\\n    }\\n\\n    function _createOrder(\\n        address owner_,\\n        bool isAsk_,\\n        uint256 price_,\\n        address deposit_,\\n        uint256 depositAmount_\\n    ) internal pure returns (Order memory order) {\\n        order = Order({\\n            owner: owner_,\\n            isAsk: isAsk_,\\n            price: price_,\\n            deposit: deposit_,\\n            depositAmount: depositAmount_,\\n            filled: 0\\n        });\\n        return order;\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/NewOrderLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nlibrary NewOrderLinkedList {\\n\\n    struct PriceLinkedList {\\n    /// Hashmap-style linked list of prices to route orders\\n    // key: price, value: next_price (next_price > price)\\n    mapping(uint256 => uint256) bidPrices;\\n    // key: price, value: next_price (next_price < price)\\n    mapping(uint256 => uint256) askPrices;\\n\\n    // Head of the bid price linked list(i.e. highest bid price)\\n    uint256 bidHead;\\n    // Head of the ask price linked list(i.e. lowest ask price)\\n    uint256 askHead;\\n    }\\n\\n\\n    function _heads(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256, uint256) {\\n        return (self.bidHead, self.askHead);\\n    }\\n\\n    function _mktPrice(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256) {\\n        require(self.bidHead > 0 && self.askHead > 0, \\\"No orders matched yet\\\");\\n        return (self.bidHead + self.askHead) / 2;\\n    }\\n\\n    function _next(PriceLinkedList storage self, bool isAsk, uint256 price) internal view returns (uint256) {\\n        if (isAsk) {\\n            return self.askPrices[price];\\n        } else {\\n            return self.bidPrices[price];\\n        }\\n    }\\n\\n    // for askPrices, lower ones are next, for bidPrices, higher ones are next\\n    function _insert(PriceLinkedList storage self, bool isAsk, uint256 price) internal {\\n        // insert ask price to the linked list\\n        if (isAsk) {\\n            if (self.askHead == 0) {\\n                self.askHead = price;\\n                return;\\n            }\\n            uint256 last = self.askHead;\\n            // Traverse through list until we find the right spot\\n            while (price < last) {\\n                last = self.askPrices[last];\\n            }\\n            // what if price is the lowest?\\n            // last is zero because it is null in solidity\\n            if (last == 0) {\\n                self.askPrices[price] = last;\\n                self.askHead = price;\\n            }\\n            // what if price is in the middle of the list?\\n            else if (self.askPrices[last] < price) {\\n                self.askPrices[price] = self.askPrices[last];\\n                self.askPrices[last] = price;\\n            }\\n            // what if price is already included?\\n            else if (price == last) {\\n                // do nothing\\n            }\\n            // what if price is the highest?\\n            else {\\n                self.askPrices[price] = last;\\n            }\\n        }\\n        // insert bid price to the linked list\\n        else {\\n            if (self.bidHead == 0) {\\n                self.bidHead = price;\\n                return;\\n            }\\n            uint256 last = self.bidHead;\\n            // Traverse through list until we find the right spot\\n            while (price > last) {\\n                last = self.bidPrices[last];\\n            }\\n            // what if price is the highest?\\n            if (last == 0) {\\n                self.bidPrices[price] = last;\\n                self.bidHead = price;\\n            }\\n            // what if price is in the middle of the list?\\n            else if (self.bidPrices[last] > price) {\\n                self.bidPrices[price] = self.bidPrices[last];\\n                self.bidPrices[last] = price;\\n            }\\n            // what if price is the lowest?\\n            else {\\n                self.bidPrices[price] = last;\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/NewOrderQueue.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.10;\\n\\nlibrary NewOrderQueue {\\n\\n    struct QueueIndex {\\n        uint first;\\n        uint last;\\n    }\\n\\n    struct OrderQueue {\\n         // Ask Order book storage (key: (Price, Index), value: orderId)\\n    mapping(bytes32 => uint256) askOrderQueue;\\n    // Ask Order book queue's indices (key: Price, value: first and last index of orders by price)\\n    mapping(uint256 => QueueIndex) askOrderQueueIndex;\\n    // Bid Order book storage (key: (Price, Index), value: orderId)\\n    mapping(bytes32 => uint256) bidOrderQueue;\\n    // Bid Order book queue's indices (key: Price, value: first and last index of orders by price)\\n    mapping(uint256 => QueueIndex) bidOrderQueueIndex;\\n    address engine;\\n    }\\n\\n    function _getOrderKey(uint256 price, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(price, index));\\n    }\\n\\n    function _initialize(OrderQueue storage self, uint256 price, bool isAsk) internal {\\n        if(_isInitialized(self, price, isAsk)) { return; }\\n        if (isAsk) {\\n            self.askOrderQueueIndex[price] = QueueIndex({\\n                first: 1,\\n                last: 0\\n            }); \\n        } else {\\n            self.bidOrderQueueIndex[price] = QueueIndex({\\n                first: 1,\\n                last: 0\\n            }); \\n        }\\n    }\\n\\n    function _isInitialized(OrderQueue storage self, uint256 price, bool isAsk)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (isAsk) {\\n            return self.askOrderQueueIndex[price].first == 0 &&\\n                self.askOrderQueueIndex[price].last == 0;\\n        } else {\\n            return self.bidOrderQueueIndex[price].first == 0 && \\n                self.bidOrderQueueIndex[price].last == 0;\\n        }\\n    }\\n\\n    function _initializeQueue(OrderQueue storage self, uint256 price, bool isAsk) internal {\\n        if (isAsk) {\\n            self.askOrderQueueIndex[price].first = 1;\\n            self.askOrderQueueIndex[price].last = 0;\\n        } else {\\n            self.bidOrderQueueIndex[price].first = 1;\\n            self.bidOrderQueueIndex[price].last = 0;\\n        }\\n    }\\n\\n    function _enqueue(\\n        OrderQueue storage self,\\n        uint256 price,\\n        bool isAsk,\\n        uint256 orderId\\n    ) internal {\\n        if (isAsk) {\\n            self.askOrderQueueIndex[price].last += 1;\\n            self.askOrderQueue[_getOrderKey(price, self.askOrderQueueIndex[price].last)] = orderId;\\n        } else {\\n            self.bidOrderQueueIndex[price].last += 1;\\n            self.bidOrderQueue[_getOrderKey(price, self.bidOrderQueueIndex[price].last)] = orderId;\\n        }\\n    }\\n\\n    function _dequeue(OrderQueue storage self, uint256 price, bool isAsk)\\n        internal\\n        returns (uint256 orderId)\\n    {\\n        require(msg.sender == self.engine, \\\"Only engine can dequeue\\\");\\n        require(!_isEmpty(self, price, isAsk), \\\"Queue is empty\\\");\\n        if (isAsk) {\\n            orderId = self.askOrderQueue[_getOrderKey(price, self.askOrderQueueIndex[price].first)];\\n            delete self.askOrderQueue[_getOrderKey(price, self.askOrderQueueIndex[price].first)];\\n            self.askOrderQueueIndex[price].first += 1;\\n            return orderId;\\n        } else {\\n            orderId = self.bidOrderQueue[_getOrderKey(price, self.bidOrderQueueIndex[price].first)];\\n            delete self.bidOrderQueue[_getOrderKey(price, self.bidOrderQueueIndex[price].first)];\\n            self.bidOrderQueueIndex[price].first += 1;\\n            return orderId;\\n        }\\n    }\\n\\n    function _length(OrderQueue storage self, uint256 price, bool isAsk) internal view returns (uint256) {\\n        if (isAsk) {\\n            if (self.askOrderQueueIndex[price].first > self.askOrderQueueIndex[price].last) {\\n                return 0;\\n            } else {\\n                return self.askOrderQueueIndex[price].last - self.askOrderQueueIndex[price].first + 1;\\n            }\\n        } else {\\n            if (self.bidOrderQueueIndex[price].first > self.bidOrderQueueIndex[price].last) {\\n                return 0;\\n            } else {\\n                return self.bidOrderQueueIndex[price].last - self.bidOrderQueueIndex[price].first + 1;\\n            }\\n        }\\n    }\\n\\n    function _isEmpty(OrderQueue storage self, uint256 price, bool isAsk) internal view returns (bool) {\\n        return _length(self, price, isAsk) == 0 || !_isInitialized(self, price, isAsk);\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"}}}","address":"0xB141EAD77E18EBBF36514E2FB1af7E7B8edBFa78","bytecode":"0x60806040526000805460ff1916905534801561001a57600080fd5b50611ac58061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a6628f4e11610097578063c0c53b8b11610066578063c0c53b8b14610230578063c45e0ae614610243578063dc1a804f14610256578063ee7ab7c91461026957600080fd5b8063a6628f4e14610191578063a85c38ef146101a4578063b8b2383114610202578063bd25b9c41461021d57600080fd5b806332b6fede116100d357806332b6fede1461014257806337632e3a14610163578063420be8a51461016b5780637323a7d31461017e57600080fd5b806304717aca146100fa5780630582b7ef1461010f578063158ef93e14610137575b600080fd5b61010d6101083660046117c6565b61027c565b005b61012261011d36600461180a565b610499565b60405190151581526020015b60405180910390f35b60005460ff16610122565b61015561015036600461180a565b6104b0565b60405190815260200161012e565b6101556104be565b61015561017936600461180a565b6104cf565b61010d61018c36600461183a565b61063e565b61012261019f36600461180a565b61086b565b6101b76101b2366004611866565b610879565b6040805173ffffffffffffffffffffffffffffffffffffffff9788168152951515602087015285019390935293166060830152608082019290925260a081019190915260c00161012e565b6007546008546040805192835260208301919091520161012e565b61010d61022b3660046117c6565b6108f1565b61010d61023e36600461187f565b61099e565b61010d6102513660046118c2565b610b80565b6101556102643660046118f7565b610dac565b610155610277366004611866565b610ec2565b6102896009836000610ef0565b6001546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c168652928501849052958401899052951694820194909452918201849052810182905290506103126005600085610f6f565b600e546103269060099085906000906110e6565b600e8054600181018255600091909152815160059091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd810180546020850151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9485161717905560408301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe82015560608301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff82018054919093167fffffffffffffffffffffffff0000000000000000000000000000000000000000919091161790915560808201517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40082015560a0909101517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40190910155505050565b60006104a7600984846111de565b90505b92915050565b60006104a760098484611209565b60006104ca60056112b1565b905090565b600d5460009073ffffffffffffffffffffffffffffffffffffffff163314610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e206465717565756500000000000000000060448201526064015b60405180910390fd5b610564600984846111de565b156105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b6105d760098484611350565b9050811561060f576000838152600a6020526040902060018101549054111561060a5761060660058385611589565b6008555b6104aa565b6000838152600c6020526040902060018101549054111561060a5761063660058385611589565b6007556104aa565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146106bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6000600e83815481106106d4576106d4611919565b60009182526020918290206040805160c081018252600593909302909101805473ffffffffffffffffffffffffffffffffffffffff8082168086527401000000000000000000000000000000000000000090920460ff16151595850195909552600182015492840192909252600281015484166060840152600381015460808401526004015460a0830152909250908316146107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79206f776e65722063616e2063616e63656c206f726465720000000000604482015260640161054f565b600e83815481106107df576107df611919565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600381018290556004015560608101516080820151610866919084906115bd565b505050565b60006104a76009848461172d565b600e818154811061088957600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff80851696507401000000000000000000000000000000000000000090940460ff16949293909116919086565b6108fe6009836000610ef0565b6002546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c1686526001938601939093529584018990529516948201949094529182018490528101829052905061098a6005600185610f6f565b600e546103269060099085906001906110e6565b60005460ff16156109ae57600080fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a609190611948565b81526020018373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611948565b90528051600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617825560208401516002805483169185169190911790556040840151600355606090930151600455600d805490931693909116929092179055600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555050565b6000600e8481548110610b9557610b95611919565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff1615159385019390935260018101549184019190915260028101549091166060830152600381015460808301526004015460a08201529150610c2b8584610dac565b9050816020015115610c7157610c46826060015185856115bd565b6001548251610c6c9173ffffffffffffffffffffffffffffffffffffffff1690836115bd565b610ca8565b610c8482606001518360000151856115bd565b600254610ca89073ffffffffffffffffffffffffffffffffffffffff1685856115bd565b600083836080015111610cc9576080830151610cc49085611990565b610cd9565b838360800151610cd99190611990565b9050610ce8620f4240856119a7565b8111610d7757600e8681548110610d0157610d01611919565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810182905560040155610da4565b8383608001818151610d899190611990565b90525060a083018051859190610da09083906119e2565b9052505b505050505050565b600080600e8481548110610dc257610dc2611919565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff16151593850184905260018201549285019290925260028101549091166060840152600381015460808401526004015460a0830152909250610e80576003546040830151610e6491906119fa565b600454610e7190866119fa565b610e7b91906119fa565b610ea9565b6004546040830151610e9291906119fa565b600354610e9f90866119fa565b610ea991906119a7565b9050610eb96305f5e100826119a7565b95945050505050565b6000600e8281548110610ed757610ed7611919565b9060005260206000209060050201600301549050919050565b610efb83838361172d565b15610f0557505050565b8015610f3c575060408051808201825260018082526000602080840182815295825295820190955291909320925183559051910155565b60408051808201825260018082526000602080840182815287835260038901909152939020915182559151910155505050565b811561103a576003830154610f8a5760039092019190915550565b60038301545b80821015610fae576000908152600184016020526040902054610f90565b80610fd2576000828152600185016020526040902081905560038401829055611034565b600081815260018501602052604090205482111561101357600081815260018501602052604080822080548584529183209190915590829052829055611034565b8082141561102057611034565b600082815260018501602052604090208190555b50505050565b600283015461104f5760029092019190915550565b60028301545b8082111561107157600090815260208490526040902054611055565b8061109357600082815260208590526040902081905560028401829055611034565b6000818152602085905260409020548210156110d05760008181526020859052604080822080548584529183209190915590829052829055611034565b6000918252602093909352604090209190915550565b811561116157600083815260018581016020526040822081018054919290916111109084906119e2565b90915550506000838152600185810160209081526040808420909201548251808301889052808401919091528251808203840181526060909101835280519082012083528690529020819055611034565b6001846003016000858152602001908152602001600020600101600082825461118a91906119e2565b90915550506000838152600385016020908152604080832060010154815180840197909752868201528051808703820181526060909601815285519582019590952082526002909501909452919092205550565b60006111eb848484611209565b15806111ff57506111fd84848461172d565b155b90505b9392505050565b6000811561126a57600083815260018086016020526040909120908101549054111561123757506000611202565b60008381526001808601602052604090912080549101546112589190611990565b6112639060016119e2565b9050611202565b6000838152600385016020526040902060018101549054111561128f57506000611202565b6000838152600385016020526040902080546001909101546112589190611990565b60008082600201541180156112ca575060008260030154115b611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f206f7264657273206d617463686564207965740000000000000000000000604482015260640161054f565b60028260030154836002015461134691906119e2565b6104aa91906119a7565b600483015460009073ffffffffffffffffffffffffffffffffffffffff1633146113d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6113e18484846111de565b15611448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b81156114ee57506000828152600184810160208181526040808520805482518085018a905280840182905283518082038501815260608201855280519086012088528a8552838820548a8952868652608082018b905260a0808301939093528451808303909301835260c0909101845281519185019190912087528984529186208690558786529290915281549093906114e39084906119e2565b909155506112029050565b506000828152600384016020818152604080842080548251808501899052808401829052835180820385018152606082018552805190860120875260028a01808652848820548a8952878752608083018b905260a0808401949094528551808403909401845260c0909201855282519286019290922087529084529185208590558685529290915281549092600192916114e39084906119e2565b600082156115a857506000818152600184016020526040902054611202565b50600081815260208490526040902054611202565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916116549190611a37565b6000604051808303816000865af19150503d8060008114611691576040519150601f19603f3d011682016040523d82523d6000602084013e611696565b606091505b50915091508180156116c05750805115806116c05750808060200190518101906116c09190611a72565b611726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5446000000000000000000000000000000000000000000000000000000000000604482015260640161054f565b5050505050565b60008115611769576000838152600185016020526040902054158015611263575050600082815260018481016020526040909120015415611202565b6000838152600385016020526040902054158015611263575050600082815260038401602052604090206001015415611202565b803573ffffffffffffffffffffffffffffffffffffffff811681146117c157600080fd5b919050565b6000806000606084860312156117db57600080fd5b6117e48461179d565b95602085013595506040909401359392505050565b801515811461180757600080fd5b50565b6000806040838503121561181d57600080fd5b82359150602083013561182f816117f9565b809150509250929050565b6000806040838503121561184d57600080fd5b8235915061185d6020840161179d565b90509250929050565b60006020828403121561187857600080fd5b5035919050565b60008060006060848603121561189457600080fd5b61189d8461179d565b92506118ab6020850161179d565b91506118b96040850161179d565b90509250925092565b6000806000606084860312156118d757600080fd5b833592506118e76020850161179d565b9150604084013590509250925092565b6000806040838503121561190a57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561195a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156119a2576119a2611961565b500390565b6000826119dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156119f5576119f5611961565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a3257611a32611961565b500290565b6000825160005b81811015611a585760208186018101518583015201611a3e565b81811115611a67576000828501525b509190910192915050565b600060208284031215611a8457600080fd5b8151611202816117f956fea2646970667358221220dda7096c90e6b3c7a6acf49619c42d73cb3f77cc8cabe16f561c49faf1074f9b64736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a6628f4e11610097578063c0c53b8b11610066578063c0c53b8b14610230578063c45e0ae614610243578063dc1a804f14610256578063ee7ab7c91461026957600080fd5b8063a6628f4e14610191578063a85c38ef146101a4578063b8b2383114610202578063bd25b9c41461021d57600080fd5b806332b6fede116100d357806332b6fede1461014257806337632e3a14610163578063420be8a51461016b5780637323a7d31461017e57600080fd5b806304717aca146100fa5780630582b7ef1461010f578063158ef93e14610137575b600080fd5b61010d6101083660046117c6565b61027c565b005b61012261011d36600461180a565b610499565b60405190151581526020015b60405180910390f35b60005460ff16610122565b61015561015036600461180a565b6104b0565b60405190815260200161012e565b6101556104be565b61015561017936600461180a565b6104cf565b61010d61018c36600461183a565b61063e565b61012261019f36600461180a565b61086b565b6101b76101b2366004611866565b610879565b6040805173ffffffffffffffffffffffffffffffffffffffff9788168152951515602087015285019390935293166060830152608082019290925260a081019190915260c00161012e565b6007546008546040805192835260208301919091520161012e565b61010d61022b3660046117c6565b6108f1565b61010d61023e36600461187f565b61099e565b61010d6102513660046118c2565b610b80565b6101556102643660046118f7565b610dac565b610155610277366004611866565b610ec2565b6102896009836000610ef0565b6001546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c168652928501849052958401899052951694820194909452918201849052810182905290506103126005600085610f6f565b600e546103269060099085906000906110e6565b600e8054600181018255600091909152815160059091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd810180546020850151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9485161717905560408301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe82015560608301517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff82018054919093167fffffffffffffffffffffffff0000000000000000000000000000000000000000919091161790915560808201517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40082015560a0909101517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40190910155505050565b60006104a7600984846111de565b90505b92915050565b60006104a760098484611209565b60006104ca60056112b1565b905090565b600d5460009073ffffffffffffffffffffffffffffffffffffffff163314610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e206465717565756500000000000000000060448201526064015b60405180910390fd5b610564600984846111de565b156105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b6105d760098484611350565b9050811561060f576000838152600a6020526040902060018101549054111561060a5761060660058385611589565b6008555b6104aa565b6000838152600c6020526040902060018101549054111561060a5761063660058385611589565b6007556104aa565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146106bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6000600e83815481106106d4576106d4611919565b60009182526020918290206040805160c081018252600593909302909101805473ffffffffffffffffffffffffffffffffffffffff8082168086527401000000000000000000000000000000000000000090920460ff16151595850195909552600182015492840192909252600281015484166060840152600381015460808401526004015460a0830152909250908316146107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79206f776e65722063616e2063616e63656c206f726465720000000000604482015260640161054f565b600e83815481106107df576107df611919565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600381018290556004015560608101516080820151610866919084906115bd565b505050565b60006104a76009848461172d565b600e818154811061088957600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff80851696507401000000000000000000000000000000000000000090940460ff16949293909116919086565b6108fe6009836000610ef0565b6002546040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875273ffffffffffffffffffffffffffffffffffffffff808c1686526001938601939093529584018990529516948201949094529182018490528101829052905061098a6005600185610f6f565b600e546103269060099085906001906110e6565b60005460ff16156109ae57600080fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a609190611948565b81526020018373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611948565b90528051600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617825560208401516002805483169185169190911790556040840151600355606090930151600455600d805490931693909116929092179055600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555050565b6000600e8481548110610b9557610b95611919565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff1615159385019390935260018101549184019190915260028101549091166060830152600381015460808301526004015460a08201529150610c2b8584610dac565b9050816020015115610c7157610c46826060015185856115bd565b6001548251610c6c9173ffffffffffffffffffffffffffffffffffffffff1690836115bd565b610ca8565b610c8482606001518360000151856115bd565b600254610ca89073ffffffffffffffffffffffffffffffffffffffff1685856115bd565b600083836080015111610cc9576080830151610cc49085611990565b610cd9565b838360800151610cd99190611990565b9050610ce8620f4240856119a7565b8111610d7757600e8681548110610d0157610d01611919565b60009182526020822060059091020180547fffffffffffffffffffffff000000000000000000000000000000000000000000168155600181018290556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810182905560040155610da4565b8383608001818151610d899190611990565b90525060a083018051859190610da09083906119e2565b9052505b505050505050565b600080600e8481548110610dc257610dc2611919565b600091825260208083206040805160c081018252600594909402909101805473ffffffffffffffffffffffffffffffffffffffff80821686527401000000000000000000000000000000000000000090910460ff16151593850184905260018201549285019290925260028101549091166060840152600381015460808401526004015460a0830152909250610e80576003546040830151610e6491906119fa565b600454610e7190866119fa565b610e7b91906119fa565b610ea9565b6004546040830151610e9291906119fa565b600354610e9f90866119fa565b610ea991906119a7565b9050610eb96305f5e100826119a7565b95945050505050565b6000600e8281548110610ed757610ed7611919565b9060005260206000209060050201600301549050919050565b610efb83838361172d565b15610f0557505050565b8015610f3c575060408051808201825260018082526000602080840182815295825295820190955291909320925183559051910155565b60408051808201825260018082526000602080840182815287835260038901909152939020915182559151910155505050565b811561103a576003830154610f8a5760039092019190915550565b60038301545b80821015610fae576000908152600184016020526040902054610f90565b80610fd2576000828152600185016020526040902081905560038401829055611034565b600081815260018501602052604090205482111561101357600081815260018501602052604080822080548584529183209190915590829052829055611034565b8082141561102057611034565b600082815260018501602052604090208190555b50505050565b600283015461104f5760029092019190915550565b60028301545b8082111561107157600090815260208490526040902054611055565b8061109357600082815260208590526040902081905560028401829055611034565b6000818152602085905260409020548210156110d05760008181526020859052604080822080548584529183209190915590829052829055611034565b6000918252602093909352604090209190915550565b811561116157600083815260018581016020526040822081018054919290916111109084906119e2565b90915550506000838152600185810160209081526040808420909201548251808301889052808401919091528251808203840181526060909101835280519082012083528690529020819055611034565b6001846003016000858152602001908152602001600020600101600082825461118a91906119e2565b90915550506000838152600385016020908152604080832060010154815180840197909752868201528051808703820181526060909601815285519582019590952082526002909501909452919092205550565b60006111eb848484611209565b15806111ff57506111fd84848461172d565b155b90505b9392505050565b6000811561126a57600083815260018086016020526040909120908101549054111561123757506000611202565b60008381526001808601602052604090912080549101546112589190611990565b6112639060016119e2565b9050611202565b6000838152600385016020526040902060018101549054111561128f57506000611202565b6000838152600385016020526040902080546001909101546112589190611990565b60008082600201541180156112ca575060008260030154115b611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f206f7264657273206d617463686564207965740000000000000000000000604482015260640161054f565b60028260030154836002015461134691906119e2565b6104aa91906119a7565b600483015460009073ffffffffffffffffffffffffffffffffffffffff1633146113d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e2064657175657565000000000000000000604482015260640161054f565b6113e18484846111de565b15611448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f517565756520697320656d707479000000000000000000000000000000000000604482015260640161054f565b81156114ee57506000828152600184810160208181526040808520805482518085018a905280840182905283518082038501815260608201855280519086012088528a8552838820548a8952868652608082018b905260a0808301939093528451808303909301835260c0909101845281519185019190912087528984529186208690558786529290915281549093906114e39084906119e2565b909155506112029050565b506000828152600384016020818152604080842080548251808501899052808401829052835180820385018152606082018552805190860120875260028a01808652848820548a8952878752608083018b905260a0808401949094528551808403909401845260c0909201855282519286019290922087529084529185208590558685529290915281549092600192916114e39084906119e2565b600082156115a857506000818152600184016020526040902054611202565b50600081815260208490526040902054611202565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916116549190611a37565b6000604051808303816000865af19150503d8060008114611691576040519150601f19603f3d011682016040523d82523d6000602084013e611696565b606091505b50915091508180156116c05750805115806116c05750808060200190518101906116c09190611a72565b611726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5446000000000000000000000000000000000000000000000000000000000000604482015260640161054f565b5050505050565b60008115611769576000838152600185016020526040902054158015611263575050600082815260018481016020526040909120015415611202565b6000838152600385016020526040902054158015611263575050600082815260038401602052604090206001015415611202565b803573ffffffffffffffffffffffffffffffffffffffff811681146117c157600080fd5b919050565b6000806000606084860312156117db57600080fd5b6117e48461179d565b95602085013595506040909401359392505050565b801515811461180757600080fd5b50565b6000806040838503121561181d57600080fd5b82359150602083013561182f816117f9565b809150509250929050565b6000806040838503121561184d57600080fd5b8235915061185d6020840161179d565b90509250929050565b60006020828403121561187857600080fd5b5035919050565b60008060006060848603121561189457600080fd5b61189d8461179d565b92506118ab6020850161179d565b91506118b96040850161179d565b90509250925092565b6000806000606084860312156118d757600080fd5b833592506118e76020850161179d565b9150604084013590509250925092565b6000806040838503121561190a57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561195a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156119a2576119a2611961565b500390565b6000826119dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156119f5576119f5611961565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a3257611a32611961565b500290565b6000825160005b81811015611a585760208186018101518583015201611a3e565b81811115611a67576000828501525b509190910192915050565b600060208284031215611a8457600080fd5b8151611202816117f956fea2646970667358221220dda7096c90e6b3c7a6acf49619c42d73cb3f77cc8cabe16f561c49faf1074f9b64736f6c634300080a0033","abi":[{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"dequeue","outputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"getOrderDepositAmount","outputs":[{"internalType":"uint256","name":"depositAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getRequired","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"heads","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"base_","type":"address"},{"internalType":"address","name":"quote_","type":"address"},{"internalType":"address","name":"engine_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"isEmpty","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"isInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isAsk","type":"bool"}],"name":"length","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mktPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"orders","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"bool","name":"isAsk","type":"bool"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"deposit","type":"address"},{"internalType":"uint256","name":"depositAmount","type":"uint256"},{"internalType":"uint256","name":"filled","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"placeAsk","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"placeBid","outputs":[],"stateMutability":"nonpayable","type":"function"}]}