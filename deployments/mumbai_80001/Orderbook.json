{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/orderbooks/Orderbook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IOrderbook.sol\\\";\\nimport \\\"../security/Initializable.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nimport \\\"../libraries/SAFEXLinkedList.sol\\\";\\nimport \\\"../libraries/SAFEXOrderbook.sol\\\";\\n\\ncontract Orderbook is IOrderbook, Initializable {\\n    using SAFEXLinkedList for SAFEXLinkedList.PriceLinkedList;\\n    using SAFEXOrderbook for SAFEXOrderbook.OrderStorage;\\n\\n    // Pair Struct\\n    struct Pair {\\n        uint256 id;\\n        address base;\\n        address quote;\\n        uint256 baseDecimals;\\n        uint256 quoteDecimals;\\n        address engine;\\n    }\\n\\n    Pair private pair;\\n\\n    // Reuse order storage with SAFEXLinkedList with isBid always true\\n    SAFEXLinkedList.PriceLinkedList private priceLists;\\n    SAFEXOrderbook.OrderStorage private _askOrders;\\n    SAFEXOrderbook.OrderStorage private _b;\\n    // order index, starts with 1\\n    uint256 index;\\n    \\n    function initialize(\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) public initializer {\\n        pair = Pair(1, base_, quote_, IERC20Minimal(base_).decimals(), IERC20Minimal(quote_).decimals(), engine_);\\n    }\\n\\n\\n    function placeBid(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external {\\n        uint256 id = _askOrders._createOrder(1, owner, amount);\\n        priceLists._insert(false, price);\\n        _askOrders._insertId(price, id, amount);\\n        // event\\n    }\\n\\n    function placeAsk(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external {\\n        uint256 id = _bidOrders._createOrder(1, owner, amount);\\n        priceLists._insert(true, price);\\n        _bidOrders._insertId(price, id, amount);\\n        // event\\n    }\\n\\n    function cancelOrder(uint256 orderId, bool isBid, address owner) external {\\n        require(msg.sender == pair.engine, \\\"Only engine can cancel\\\");\\n        SAFEXOrderbook.Order memory order = isBid ? _bidOrders._getOrder(orderId) : _askOrders._getOrder(orderId);\\n        require(order.owner == owner, \\\"Only owner can cancel order\\\");\\n        isBid ? _bidOrders._cancelOrder(orderId) : _askOrders._cancelOrder(orderId);\\n        isBid ? TransferHelper.safeTransfer(pair.quote, owner, order.depositAmount) : TransferHelper.safeTransfer(pair.base, owner, order.depositAmount);\\n        // event\\n    }\\n\\n    // get required amount for executing the order\\n    function _getRequired(bool isBid, uint256 price, uint256 amount)\\n        public\\n        view\\n        returns (uint256 required)\\n    {\\n        // if order is ask, required amount is quoteAmount / price, converting the number converting decimal from quote to base, otherwise baseAmount * price, converting decimal from base to quote\\n        uint256 pIn = isBid ? (amount*pair.baseDecimals) / (price*pair.quoteDecimals)  : (amount*pair.quoteDecimals) * (price*pair.baseDecimals);\\n        return pIn / 1e8;\\n    }\\n\\n    function getOrderDepositAmount(bool isBid, uint256 orderId) external view returns (uint256 depositAmount) {\\n        SAFEXOrderbook.Order memory order = isBid ? _bidOrders._getOrder(orderId) : _askOrders._getOrder(orderId);\\n        return order.depositAmount;\\n    } \\n\\n\\n    function execute(\\n        uint256 orderId,\\n        bool isBid,\\n        uint256 price,\\n        address sender,\\n        uint256 amount\\n    ) external {\\n        SAFEXOrderbook.Order memory order = isBid ? _bidOrders._getOrder(orderId) : _askOrders._getOrder(orderId);\\n        uint256 required = _getRequired(isBid, price, amount);\\n        // if the order is ask order on the base/quote pair\\n        if (isBid) {\\n            // owner is buyer, and sender is seller. if buyer is asking for base asset with quote asset in deposit\\n            // then the converted amount is <base>/<quote> == (baseAmount * 10^qDecimal) / (quoteAmount * 10^bDecimal)\\n            // send deposit as quote asset to seller\\n            TransferHelper.safeTransfer(pair.quote, sender, amount);\\n            // send claimed amount of base asset to buyer\\n            TransferHelper.safeTransfer(pair.base, order.owner, required);\\n        }\\n        // if the order is bid order on the base/quote pair\\n        else {\\n            // owner is seller, and sender is buyer. buyer is asking for quote asset with base asset in deposit\\n            // then the converted amount is <base>/<quote> == depositAmount / claimAmount => claimAmount == depositAmount / price\\n            // send deposit as base asset to buyer\\n            TransferHelper.safeTransfer(pair.base, order.owner, amount);\\n            // send claimed amount of quote asset to seller\\n            TransferHelper.safeTransfer(pair.quote, sender, amount);\\n        }\\n        uint256 absDiff = (order.depositAmount > amount)\\n            ? (order.depositAmount - amount)\\n            : (amount - order.depositAmount);\\n        if (absDiff <= amount / 1e6) {\\n            isBid ? _bidOrders._cancelOrder(orderId) : _askOrders._cancelOrder(orderId);\\n        } else {\\n            // update deposit amount\\n            order.depositAmount -= amount;\\n        }\\n    }\\n    /////////////////////////////////\\n    /// Price linked list methods ///\\n    /////////////////////////////////\\n\\n    function heads() external view returns (uint256, uint256) {\\n        return priceLists._heads();\\n    }\\n\\n    function mktPrice() external view returns (uint256) {\\n        return priceLists._mktPrice();\\n    }\\n    \\n\\n    /////////////////////////////////\\n    ///    Order queue methods    ///\\n    /////////////////////////////////\\n\\n    function fpop(bool isBid, uint256 price)\\n        external\\n        returns (uint256 orderId)\\n    {\\n        \\n        require(msg.sender == pair.engine, \\\"Only engine can dequeue\\\");\\n        orderId = isBid ? _bidOrders._fpop(price) : _askOrders._fpop(price);\\n        if (isEmpty(isBid, price)) {\\n            isBid ? priceLists.bidHead = priceLists._next(isBid, price) : priceLists.askHead = priceLists._next(isBid, price);\\n        }\\n        return orderId;\\n    }\\n\\n    function isEmpty(bool isBid, uint256 price) public view returns (bool) {\\n        return isBid ? _bidOrders._isEmpty(price) : _askOrders._isEmpty(price);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/interfaces/IOrderbook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface IOrderbook {\\n    function initialize(\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) external;\\n\\n    function fpop(bool isBid, uint256 price)\\n        external\\n        returns (uint256 orderId);\\n\\n    function mktPrice() external view returns (uint256);\\n\\n    function isEmpty(bool isBid, uint256 price) external view returns (bool);\\n\\n    function getOrderDepositAmount(bool isBid, uint256 orderId) external view returns (uint256 depositAmount); \\n\\n    function placeAsk(address owner, uint256 price, uint256 amount) external;\\n\\n    function placeBid(address owner, uint256 price, uint256 amount) external;\\n\\n    function execute(uint256 orderId,\\n        bool isBid,\\n        uint256 price,\\n        address sender,\\n        uint256 amount) external;\\n\\n    function heads() external view returns (uint256 bidHead, uint256 askHead);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/security/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ncontract Initializable {\\n    bool private _initialized = false;\\n\\n    modifier initializer() {\\n        // solhint-disable-next-line reason-string\\n        require(!_initialized);\\n        _;\\n        _initialized = true;\\n    }\\n\\n    function initialized() external view returns (bool) {\\n        return _initialized;\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AF\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TF\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TFF\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"ETF\\\");\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Minimal {\\n    function decimals() external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/SAFEXLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nlibrary SAFEXLinkedList {\\n\\n    struct PriceLinkedList {\\n    /// Hashmap-style linked list of prices to route orders\\n    // key: price, value: next_price (next_price > price)\\n    mapping(uint256 => uint256) askPrices;\\n    // key: price, value: next_price (next_price < price)\\n    mapping(uint256 => uint256) bidPrices;\\n\\n    // Head of the bid price linked list(i.e. highest bid price)\\n    uint256 askHead;\\n    // Head of the ask price linked list(i.e. lowest ask price)\\n    uint256 bidHead;\\n    }\\n\\n\\n    function _heads(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256, uint256) {\\n        return (self.bidHead, self.askHead);\\n    }\\n\\n    function _mktPrice(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256) {\\n        require(self.askHead > 0 && self.bidHead > 0, \\\"No orders matched yet\\\");\\n        return (self.askHead + self.bidHead) / 2;\\n    }\\n\\n    function _next(PriceLinkedList storage self, bool isBid, uint256 price) internal view returns (uint256) {\\n        if (isBid) {\\n            return self.bidPrices[price];\\n        } else {\\n            return self.askPrices[price];\\n        }\\n    }\\n\\n    // for bidPrices, lower ones are next, for askPrices, higher ones are next\\n    function _insert(PriceLinkedList storage self, bool isBid, uint256 price) internal {\\n        // insert ask price to the linked list\\n        if (isBid) {\\n            if (self.bidHead == 0) {\\n                self.bidHead = price;\\n                return;\\n            }\\n            uint256 last = self.bidHead;\\n            // Traverse through list until we find the right spot\\n            while (price < last) {\\n                last = self.bidPrices[last];\\n            }\\n            // what if price is the lowest?\\n            // last is zero because it is null in solidity\\n            if (last == 0) {\\n                self.bidPrices[price] = last;\\n                self.bidHead = price;\\n            }\\n            // what if price is in the middle of the list?\\n            else if (self.bidPrices[last] < price) {\\n                self.bidPrices[price] = self.bidPrices[last];\\n                self.bidPrices[last] = price;\\n            }\\n            // what if price is already included?\\n            else if (price == last) {\\n                // do nothing\\n            }\\n            // what if price is the highest?\\n            else {\\n                self.bidPrices[price] = last;\\n            }\\n        }\\n        // insert bid price to the linked list\\n        else {\\n            if (self.askHead == 0) {\\n                self.askHead = price;\\n                return;\\n            }\\n            uint256 last = self.askHead;\\n            // Traverse through list until we find the right spot\\n            while (price > last) {\\n                last = self.askPrices[last];\\n            }\\n            // what if price is the highest?\\n            if (last == 0) {\\n                self.askPrices[price] = last;\\n                self.askHead = price;\\n            }\\n            // what if price is in the middle of the list?\\n            else if (self.askPrices[last] > price) {\\n                self.askPrices[price] = self.askPrices[last];\\n                self.askPrices[last] = price;\\n            }\\n            // what if price is the lowest?\\n            else {\\n                self.askPrices[price] = last;\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/SAFEXOrderbook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nlibrary SAFEXOrderbook {\\n    // Order struct\\n    struct Order {\\n        uint256 pairId;\\n        address owner;\\n        uint256 depositAmount;\\n        uint256 had;\\n    }\\n\\n    // Order Linked List\\n    struct OrderStorage {\\n        /// Hashmap-style linked list of prices to route orders\\n        // key: price, value: next_price (next_price > price)\\n        mapping(uint256 => mapping(uint256 => uint256)) list;\\n        mapping(uint256 => Order) orders;\\n        // Head of the linked list(i.e. lowest ask price)\\n        mapping(uint256 => uint256) head;\\n        uint256 count;\\n        address engine;\\n    }\\n\\n    function _head(OrderStorage storage self, uint256 price)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.head[price];\\n    }\\n\\n    function _isEmpty(OrderStorage storage self, uint256 price)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.head[price] == 0;\\n    }\\n\\n    // pop front\\n    function _fpop(OrderStorage storage self, uint256 price)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 first = self.head[price];\\n        if (first == 0) {\\n            return 0;\\n        }\\n        uint256 next = self.list[price][first];\\n        self.head[price] = next;\\n        delete self.list[price][first];\\n        return first;\\n    }\\n\\n    function _next(\\n        OrderStorage storage self,\\n        uint256 price,\\n        uint256 curr\\n    ) internal view returns (uint256) {\\n        return self.list[price][curr];\\n    }\\n\\n    // for orders, lower depositAmount are next,\\n    function _insertId(\\n        OrderStorage storage self,\\n        uint256 price,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        uint256 last = 0;\\n        uint256 head = self.head[price];\\n        // insert order to the linked list\\n        // if the list is empty\\n        if (head == 0) {\\n            self.head[price] = id;\\n            return;\\n        }\\n        // Traverse through list until we find the right spot where id's deposit amount is higher than next\\n        while (\\n            head != 0\\n        ) {\\n            // what if order deposit amount is bigger than the next order's deposit amount?\\n            if (amount > self.orders[head].depositAmount) {\\n                // set next order id after input id\\n                self.list[price][id] = self.list[price][head];\\n                // set last order id before input id\\n                self.list[price][last] = id;\\n            }\\n            // what if order is canceled and order id still stays in the list?\\n            else if(self.orders[head].depositAmount == 0) {\\n                // set next of next order id to the next order id of last order\\n                self.list[price][last] = self.list[price][head];\\n                // delete canceled order id\\n                delete self.list[price][head];\\n                // set head to the next order id of last order\\n                head = self.list[price][last];\\n            }\\n            // what if there is same order with same deposit amount?\\n            else {\\n                // Keep traversing\\n                last = head;\\n                head = self.list[price][head];\\n            }\\n        }\\n    }\\n\\n    function _getOrder(\\n        OrderStorage storage self,\\n        uint256 id\\n    ) internal view returns (Order memory) {\\n        return self.orders[id];\\n    }\\n\\n    function _createOrder(\\n        OrderStorage storage self,\\n        uint256 pairId,\\n        address owner,\\n        uint256 depositAmount\\n    ) internal returns (uint256 id) {\\n        Order memory order = Order({\\n            pairId: pairId,\\n            owner: owner,\\n            depositAmount: depositAmount,\\n            had: depositAmount\\n        });\\n        self.count = self.count == 0 ? 1: self.count +1;\\n        self.orders[self.count] = order;\\n        return self.count;\\n    }\\n\\n    function _cancelOrder(\\n        OrderStorage storage self,\\n        uint256 id\\n    ) internal  {\\n        delete self.orders[id];\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"}}}","address":"0xc9311588EFF89012421B18D800B1642246c886B5","bytecode":"0x60806040526000805460ff1916905534801561001a57600080fd5b5061137c8061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063733f854e11610081578063c0c53b8b1161005b578063c0c53b8b1461019a578063cd9de39f146101ad578063f6b1d5b9146101c057600080fd5b8063733f854e14610159578063b8b238311461016c578063bd25b9c41461018757600080fd5b806344d21abf116100b257806344d21abf146101205780636c797bb61461013357806370c7c0061461014657600080fd5b806304717aca146100d9578063158ef93e146100ee57806337632e3a1461010a575b600080fd5b6100ec6100e73660046110b5565b6101d3565b005b60005460ff165b60405190151581526020015b60405180910390f35b610112610205565b604051908152602001610101565b6100ec61012e3660046110f9565b610216565b610112610141366004611137565b61044e565b6100ec610154366004611163565b61047f565b610112610167366004611137565b610658565b600a5460095460408051928352602083019190915201610101565b6100ec6101953660046110b5565b610741565b6100ec6101a83660046111b3565b61076d565b6101126101bb3660046111df565b61096e565b6100f56101ce366004611137565b6109de565b60006101e3600b60018685610a0f565b90506101f26007600085610af5565b6101ff600b848385610c6b565b50505050565b60006102116007610d54565b905090565b60065473ffffffffffffffffffffffffffffffffffffffff16331461029c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c7920656e67696e652063616e2063616e63656c0000000000000000000060448201526064015b60405180910390fd5b6000826102b3576102ae600b85610df3565b6102be565b6102be601085610df3565b90508173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79206f776e65722063616e2063616e63656c206f7264657200000000006044820152606401610293565b826103a9576000848152600c602052604081208181556001810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560028101829055600301556103f0565b60008481526011602052604081208181556001810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560028101829055600301555b8261042457600254604082015161041f9173ffffffffffffffffffffffffffffffffffffffff16908490610e8f565b6101ff565b60035460408201516101ff9173ffffffffffffffffffffffffffffffffffffffff16908490610e8f565b6000808361046657610461600b84610df3565b610471565b610471601084610df3565b604001519150505b92915050565b60008461049657610491600b87610df3565b6104a1565b6104a1601087610df3565b905060006104b086868561096e565b9050851561050a576003546104dc9073ffffffffffffffffffffffffffffffffffffffff168585610e8f565b60025460208301516105059173ffffffffffffffffffffffffffffffffffffffff169083610e8f565b610557565b60025460208301516105339173ffffffffffffffffffffffffffffffffffffffff169085610e8f565b6003546105579073ffffffffffffffffffffffffffffffffffffffff168585610e8f565b600083836040015111610578576040830151610573908561122e565b610588565b838360400151610588919061122e565b9050610597620f424085611245565b811161063857866105ed576000888152600c602052604081208181556001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600281018290556003015561064e565b60008881526011602052604081208181556001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600281018290556003015561064e565b838360400181815161064a919061122e565b9052505b5050505050505050565b60065460009073ffffffffffffffffffffffffffffffffffffffff1633146106dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e20646571756575650000000000000000006044820152606401610293565b826106f1576106ec600b83610fff565b6106fc565b6106fc601083610fff565b905061070883836109de565b1561047957826107285761071e60078484611058565b600981905561073a565b61073460078484611058565b600a8190555b5092915050565b6000610751601060018685610a0f565b90506107606007600185610af5565b6101ff6010848385610c6b565b60005460ff161561077d57600080fd5b6040518060c00160405280600181526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190611280565b81526020018373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190611280565b815273ffffffffffffffffffffffffffffffffffffffff9283166020918201528151600190815590820151600280549185167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790556040830151600380549186169183169190911790556060830151600455608083015160055560a0909201516006805491909416921691909117909155600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555050565b6000808461099f576004546109839085611299565b6005546109909085611299565b61099a9190611299565b6109c3565b6005546109ac9085611299565b6004546109b99085611299565b6109c39190611245565b90506109d36305f5e10082611245565b9150505b9392505050565b6000826109fa576000828152600d6020526040902054156109d7565b600082815260126020526040902054156109d7565b6040805160808101825284815273ffffffffffffffffffffffffffffffffffffffff841660208201529081018290526060810182905260038501546000919015610a68576003860154610a639060016112d6565b610a6b565b60015b600380880182815560009283526001808a0160209081526040948590208651815590860151918101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff000000000000000000000000000000000000000090931692909217909155928401516002840155606090930151910155549050949350505050565b8115610bbf576003830154610b105760039092019190915550565b60038301545b80821015610b34576000908152600184016020526040902054610b16565b80610b585760008281526001850160205260409020819055600384018290556101ff565b6000818152600185016020526040902054821115610b99576000818152600185016020526040808220805485845291832091909155908290528290556101ff565b80821415610ba6576101ff565b6000828152600185016020526040902081905550505050565b6002830154610bd45760029092019190915550565b60028301545b80821115610bf657600090815260208490526040902054610bda565b80610c18576000828152602085905260409020819055600284018290556101ff565b600081815260208590526040902054821015610c5557600081815260208590526040808220805485845291832091909155908290528290556101ff565b6000918252602093909352604090209190915550565b600083815260028501602052604081205480610c9b575050600083815260028501602052604090208290556101ff565b5b8015610d4c576000818152600187016020526040902060020154831115610cea5760008581526020878152604080832084845290915280822054868352818320558382529020849055610c9c565b6000818152600187016020526040902060020154610d2c5760008581526020878152604080832093835292905281812080548483529282209283555554610c9c565b600085815260208781526040808320848452909152902054909150610c9c565b505050505050565b6000808260020154118015610d6d575060008260030154115b610dd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f206f7264657273206d6174636865642079657400000000000000000000006044820152606401610293565b600282600301548360020154610de991906112d6565b6104799190611245565b610e34604051806080016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b506000908152600191820160209081526040918290208251608081018452815481529381015473ffffffffffffffffffffffffffffffffffffffff169184019190915260028101549183019190915260030154606082015290565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691610f2691906112ee565b6000604051808303816000865af19150503d8060008114610f63576040519150601f19603f3d011682016040523d82523d6000602084013e610f68565b606091505b5091509150818015610f92575080511580610f92575080806020019051810190610f929190611329565b610ff8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f54460000000000000000000000000000000000000000000000000000000000006044820152606401610293565b5050505050565b60008181526002830160205260408120548061101f576000915050610479565b600083815260208581526040808320848452808352818420805488865260028a0185529285209290925584845290915255905092915050565b60008215611077575060008181526001840160205260409020546109d7565b506000818152602084905260409020546109d7565b803573ffffffffffffffffffffffffffffffffffffffff811681146110b057600080fd5b919050565b6000806000606084860312156110ca57600080fd5b6110d38461108c565b95602085013595506040909401359392505050565b80151581146110f657600080fd5b50565b60008060006060848603121561110e57600080fd5b833592506020840135611120816110e8565b915061112e6040850161108c565b90509250925092565b6000806040838503121561114a57600080fd5b8235611155816110e8565b946020939093013593505050565b600080600080600060a0868803121561117b57600080fd5b85359450602086013561118d816110e8565b9350604086013592506111a26060870161108c565b949793965091946080013592915050565b6000806000606084860312156111c857600080fd5b6111d18461108c565b92506111206020850161108c565b6000806000606084860312156111f457600080fd5b83356110d3816110e8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611240576112406111ff565b500390565b60008261127b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561129257600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112d1576112d16111ff565b500290565b600082198211156112e9576112e96111ff565b500190565b6000825160005b8181101561130f57602081860181015185830152016112f5565b8181111561131e576000828501525b509190910192915050565b60006020828403121561133b57600080fd5b81516109d7816110e856fea2646970667358221220ca79c38ecf74c1b249d5f3e5fc6f40f717fefbccb64cac92eb1e1d4343d4884664736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063733f854e11610081578063c0c53b8b1161005b578063c0c53b8b1461019a578063cd9de39f146101ad578063f6b1d5b9146101c057600080fd5b8063733f854e14610159578063b8b238311461016c578063bd25b9c41461018757600080fd5b806344d21abf116100b257806344d21abf146101205780636c797bb61461013357806370c7c0061461014657600080fd5b806304717aca146100d9578063158ef93e146100ee57806337632e3a1461010a575b600080fd5b6100ec6100e73660046110b5565b6101d3565b005b60005460ff165b60405190151581526020015b60405180910390f35b610112610205565b604051908152602001610101565b6100ec61012e3660046110f9565b610216565b610112610141366004611137565b61044e565b6100ec610154366004611163565b61047f565b610112610167366004611137565b610658565b600a5460095460408051928352602083019190915201610101565b6100ec6101953660046110b5565b610741565b6100ec6101a83660046111b3565b61076d565b6101126101bb3660046111df565b61096e565b6100f56101ce366004611137565b6109de565b60006101e3600b60018685610a0f565b90506101f26007600085610af5565b6101ff600b848385610c6b565b50505050565b60006102116007610d54565b905090565b60065473ffffffffffffffffffffffffffffffffffffffff16331461029c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c7920656e67696e652063616e2063616e63656c0000000000000000000060448201526064015b60405180910390fd5b6000826102b3576102ae600b85610df3565b6102be565b6102be601085610df3565b90508173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79206f776e65722063616e2063616e63656c206f7264657200000000006044820152606401610293565b826103a9576000848152600c602052604081208181556001810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560028101829055600301556103f0565b60008481526011602052604081208181556001810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560028101829055600301555b8261042457600254604082015161041f9173ffffffffffffffffffffffffffffffffffffffff16908490610e8f565b6101ff565b60035460408201516101ff9173ffffffffffffffffffffffffffffffffffffffff16908490610e8f565b6000808361046657610461600b84610df3565b610471565b610471601084610df3565b604001519150505b92915050565b60008461049657610491600b87610df3565b6104a1565b6104a1601087610df3565b905060006104b086868561096e565b9050851561050a576003546104dc9073ffffffffffffffffffffffffffffffffffffffff168585610e8f565b60025460208301516105059173ffffffffffffffffffffffffffffffffffffffff169083610e8f565b610557565b60025460208301516105339173ffffffffffffffffffffffffffffffffffffffff169085610e8f565b6003546105579073ffffffffffffffffffffffffffffffffffffffff168585610e8f565b600083836040015111610578576040830151610573908561122e565b610588565b838360400151610588919061122e565b9050610597620f424085611245565b811161063857866105ed576000888152600c602052604081208181556001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600281018290556003015561064e565b60008881526011602052604081208181556001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600281018290556003015561064e565b838360400181815161064a919061122e565b9052505b5050505050505050565b60065460009073ffffffffffffffffffffffffffffffffffffffff1633146106dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c7920656e67696e652063616e20646571756575650000000000000000006044820152606401610293565b826106f1576106ec600b83610fff565b6106fc565b6106fc601083610fff565b905061070883836109de565b1561047957826107285761071e60078484611058565b600981905561073a565b61073460078484611058565b600a8190555b5092915050565b6000610751601060018685610a0f565b90506107606007600185610af5565b6101ff6010848385610c6b565b60005460ff161561077d57600080fd5b6040518060c00160405280600181526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190611280565b81526020018373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190611280565b815273ffffffffffffffffffffffffffffffffffffffff9283166020918201528151600190815590820151600280549185167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790556040830151600380549186169183169190911790556060830151600455608083015160055560a0909201516006805491909416921691909117909155600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555050565b6000808461099f576004546109839085611299565b6005546109909085611299565b61099a9190611299565b6109c3565b6005546109ac9085611299565b6004546109b99085611299565b6109c39190611245565b90506109d36305f5e10082611245565b9150505b9392505050565b6000826109fa576000828152600d6020526040902054156109d7565b600082815260126020526040902054156109d7565b6040805160808101825284815273ffffffffffffffffffffffffffffffffffffffff841660208201529081018290526060810182905260038501546000919015610a68576003860154610a639060016112d6565b610a6b565b60015b600380880182815560009283526001808a0160209081526040948590208651815590860151918101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff000000000000000000000000000000000000000090931692909217909155928401516002840155606090930151910155549050949350505050565b8115610bbf576003830154610b105760039092019190915550565b60038301545b80821015610b34576000908152600184016020526040902054610b16565b80610b585760008281526001850160205260409020819055600384018290556101ff565b6000818152600185016020526040902054821115610b99576000818152600185016020526040808220805485845291832091909155908290528290556101ff565b80821415610ba6576101ff565b6000828152600185016020526040902081905550505050565b6002830154610bd45760029092019190915550565b60028301545b80821115610bf657600090815260208490526040902054610bda565b80610c18576000828152602085905260409020819055600284018290556101ff565b600081815260208590526040902054821015610c5557600081815260208590526040808220805485845291832091909155908290528290556101ff565b6000918252602093909352604090209190915550565b600083815260028501602052604081205480610c9b575050600083815260028501602052604090208290556101ff565b5b8015610d4c576000818152600187016020526040902060020154831115610cea5760008581526020878152604080832084845290915280822054868352818320558382529020849055610c9c565b6000818152600187016020526040902060020154610d2c5760008581526020878152604080832093835292905281812080548483529282209283555554610c9c565b600085815260208781526040808320848452909152902054909150610c9c565b505050505050565b6000808260020154118015610d6d575060008260030154115b610dd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f206f7264657273206d6174636865642079657400000000000000000000006044820152606401610293565b600282600301548360020154610de991906112d6565b6104799190611245565b610e34604051806080016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b506000908152600191820160209081526040918290208251608081018452815481529381015473ffffffffffffffffffffffffffffffffffffffff169184019190915260028101549183019190915260030154606082015290565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691610f2691906112ee565b6000604051808303816000865af19150503d8060008114610f63576040519150601f19603f3d011682016040523d82523d6000602084013e610f68565b606091505b5091509150818015610f92575080511580610f92575080806020019051810190610f929190611329565b610ff8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f54460000000000000000000000000000000000000000000000000000000000006044820152606401610293565b5050505050565b60008181526002830160205260408120548061101f576000915050610479565b600083815260208581526040808320848452808352818420805488865260028a0185529285209290925584845290915255905092915050565b60008215611077575060008181526001840160205260409020546109d7565b506000818152602084905260409020546109d7565b803573ffffffffffffffffffffffffffffffffffffffff811681146110b057600080fd5b919050565b6000806000606084860312156110ca57600080fd5b6110d38461108c565b95602085013595506040909401359392505050565b80151581146110f657600080fd5b50565b60008060006060848603121561110e57600080fd5b833592506020840135611120816110e8565b915061112e6040850161108c565b90509250925092565b6000806040838503121561114a57600080fd5b8235611155816110e8565b946020939093013593505050565b600080600080600060a0868803121561117b57600080fd5b85359450602086013561118d816110e8565b9350604086013592506111a26060870161108c565b949793965091946080013592915050565b6000806000606084860312156111c857600080fd5b6111d18461108c565b92506111206020850161108c565b6000806000606084860312156111f457600080fd5b83356110d3816110e8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611240576112406111ff565b500390565b60008261127b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561129257600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112d1576112d16111ff565b500290565b600082198211156112e9576112e96111ff565b500190565b6000825160005b8181101561130f57602081860181015185830152016112f5565b8181111561131e576000828501525b509190910192915050565b60006020828403121561133b57600080fd5b81516109d7816110e856fea2646970667358221220ca79c38ecf74c1b249d5f3e5fc6f40f717fefbccb64cac92eb1e1d4343d4884664736f6c634300080a0033","abi":[{"inputs":[{"internalType":"bool","name":"isBid","type":"bool"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"_getRequired","outputs":[{"internalType":"uint256","name":"required","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"bool","name":"isBid","type":"bool"},{"internalType":"address","name":"owner","type":"address"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"bool","name":"isBid","type":"bool"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"isBid","type":"bool"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"fpop","outputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"isBid","type":"bool"},{"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"getOrderDepositAmount","outputs":[{"internalType":"uint256","name":"depositAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"heads","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"base_","type":"address"},{"internalType":"address","name":"quote_","type":"address"},{"internalType":"address","name":"engine_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"isBid","type":"bool"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"isEmpty","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mktPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"placeAsk","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"placeBid","outputs":[],"stateMutability":"nonpayable","type":"function"}]}