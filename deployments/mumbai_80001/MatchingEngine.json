{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/MatchingEngine.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IOrderbookFactory.sol\\\";\\nimport \\\"./interfaces/IOrderbook.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\n// Onchain Matching engine for the orders\\ncontract MatchingEngine is AccessControl {\\n    // fee recipient\\n    address private feeTo;\\n    // fee denominator\\n    uint256 public feeDenom;\\n    // fee numerator\\n    uint256 public feeNum;\\n    // Factories\\n    address public orderbookFactory;\\n\\n    address public test;\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        feeTo = msg.sender;\\n        feeDenom = 1000;\\n        feeNum = 3;\\n    }\\n\\n    function initialize(address orderbook_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        test = orderbook_;\\n    }\\n\\n    function setFee(uint256 feeNum_, uint256 feeDenom_)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        feeNum = feeNum_;\\n        feeDenom = feeDenom_;\\n    }\\n\\n    function setFeeTo(address feeTo_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        feeTo = feeTo_;\\n    }\\n\\n    // match bid if isBid == true, match ask if isBid == false\\n    function _matchAt(\\n        address orderbook,\\n        address give,\\n        bool isBid,\\n        uint256 amount,\\n        uint256 priceAt\\n    ) internal returns (uint256 remaining) {\\n        remaining = amount;\\n        while (\\n            remaining > 0 && !IOrderbook(orderbook).isEmpty(!isBid, priceAt)\\n        ) {\\n            // Dequeue OrderQueue by price, if ask you get bid order, if bid you get ask order\\n            uint256 orderId = IOrderbook(orderbook).fpop(!isBid, priceAt);\\n            uint256 depositAmount = IOrderbook(orderbook).getOrderDepositAmount(\\n                !isBid,\\n                orderId\\n            );\\n            if (remaining < depositAmount) {\\n                TransferHelper.safeTransfer(give, orderbook, remaining);\\n                IOrderbook(orderbook).execute(orderId, !isBid, priceAt, msg.sender, remaining);\\n                // emit event orderfilled, no need to edit price head\\n                return 0;\\n            }\\n            // order is null\\n            else if (depositAmount == 0) {\\n                continue;\\n            }\\n            // remaining >= depositAmount\\n            else {\\n                remaining -= depositAmount;\\n                TransferHelper.safeTransfer(give, orderbook, depositAmount);\\n                IOrderbook(orderbook).execute(\\n                    orderId,\\n                    !isBid,\\n                    priceAt,\\n                    msg.sender,\\n                    depositAmount\\n                );\\n                // event orderfullfilled\\n            }\\n        }\\n        return remaining;\\n    }\\n\\n    function _limitOrder(\\n        address orderbook,\\n        uint256 amount,\\n        address give,\\n        bool isBid,\\n        uint256 limitPrice\\n    ) internal returns (uint256 remaining) {\\n        remaining = amount;\\n        (uint256 askHead, uint256 bidHead) = IOrderbook(orderbook).heads();\\n        if (isBid) {\\n            // check if there is any ask order in the price at the head\\n            while (remaining > 0 && bidHead != 0 && bidHead <= limitPrice) {\\n                remaining = _matchAt(orderbook, give, true, remaining, bidHead);\\n                (askHead, bidHead) = IOrderbook(orderbook).heads();\\n            }\\n        } else {\\n            // check if there is any bid order in the price at the head\\n            while (remaining > 0 && askHead != 0 && askHead >= limitPrice) {\\n                remaining = _matchAt(\\n                    orderbook,\\n                    give,\\n                    false,\\n                    remaining,\\n                    askHead\\n                );\\n                (bidHead, askHead) = IOrderbook(orderbook).heads();\\n            }\\n        }\\n        return (remaining);\\n    }\\n\\n    function _deposit(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        bool isBid\\n    ) internal returns (uint256 withoutFee, address orderbook) {\\n        uint256 fee = (amount * feeNum) / feeDenom;\\n        withoutFee = amount - fee;\\n        if (isBid) {\\n            // transfer input asset give user to this contract\\n            TransferHelper.safeTransferFrom(\\n                quote,\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        } else {\\n            // transfer input asset give user to this contract\\n            TransferHelper.safeTransferFrom(\\n                base,\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        }\\n\\n        return (withoutFee, orderbook);\\n    }\\n\\n    // Market orders\\n    function marketBuy(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        bool isStop\\n    ) external {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            amount,\\n            true\\n        );\\n        // negate on give if the asset is not the base\\n        uint256 remaining = _limitOrder(\\n            orderbook,\\n            withoutFee,\\n            quote,\\n            true,\\n            type(uint256).max\\n        );\\n        // add stop order on market price\\n        address stopTo = isStop ? orderbook : msg.sender;\\n        TransferHelper.safeTransfer(quote, stopTo, remaining);\\n        uint256 mktPrice = IOrderbook(orderbook).mktPrice();\\n        _stopOrder(orderbook, remaining, mktPrice, true);\\n    }\\n\\n    function marketSell(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        bool isStop\\n    ) external {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            amount,\\n            false\\n        );\\n        // negate on give if the asset is not the base\\n        uint256 remaining = _limitOrder(\\n            orderbook,\\n            withoutFee,\\n            quote,\\n            false,\\n            type(uint256).max\\n        );\\n\\n        address stopTo = isStop ? orderbook : msg.sender;\\n        TransferHelper.safeTransfer(base, stopTo, remaining);\\n        uint256 mktPrice = IOrderbook(orderbook).mktPrice();\\n        _stopOrder(orderbook, remaining, mktPrice, false);\\n    }\\n\\n    // Limit orders\\n    function limitBuy(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        uint256 at,\\n        bool isStop\\n    ) external {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            amount,\\n            true\\n        );\\n        // negate on give if the asset is not the base\\n        uint256 remaining = _limitOrder(test, withoutFee, quote, true, at);\\n        if (remaining > 0) {\\n            address stopTo = isStop ? orderbook : msg.sender;\\n            TransferHelper.safeTransfer(quote, stopTo, remaining);\\n            _stopOrder(test, remaining, at, true);\\n        }\\n    }\\n\\n    function limitSell(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        uint256 at,\\n        bool isStop\\n    ) external {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            amount,\\n            false\\n        );\\n        // negate on give if the asset is not the quote\\n        uint256 remaining = _limitOrder(test, withoutFee, base, false, at);\\n        if (remaining > 0) {\\n            address stopTo = isStop ? test : msg.sender;\\n            TransferHelper.safeTransfer(base, stopTo, remaining);\\n            _stopOrder(test, remaining, at, false);\\n        }\\n    }\\n\\n    function _stopOrder(\\n        address orderbook,\\n        uint256 withoutFee,\\n        uint256 at,\\n        bool isBid\\n    ) internal {\\n        // create order\\n        if (isBid) {\\n            IOrderbook(orderbook).placeAsk(msg.sender, at, withoutFee);\\n        } else {\\n            IOrderbook(orderbook).placeBid(msg.sender, at, withoutFee);\\n        }\\n    }\\n\\n    // Stop orders\\n    function stopBuy(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        uint256 at\\n    ) external {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            amount,\\n            false\\n        );\\n        _stopOrder(orderbook, withoutFee, at, true);\\n    }\\n\\n    function stopSell(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        uint256 at\\n    ) external {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            amount,\\n            false\\n        );\\n        _stopOrder(orderbook, withoutFee, at, false);\\n    }\\n\\n    function addPair(address base, address quote)\\n        external\\n        returns (address book)\\n    {\\n        // TODO: take fee give the sender (e.g. 100k value of network take)\\n\\n        // create orderbook for the pair\\n        address orderBook = IOrderbookFactory(orderbookFactory).createBook(\\n            base,\\n            quote,\\n            address(this)\\n        );\\n\\n        return orderBook;\\n    }\\n\\n    function getOrderbook(uint256 id) external view returns (address) {\\n        return IOrderbookFactory(orderbookFactory).getBook(id);\\n    }\\n\\n    function getOrderbookBaseQuote(address orderbook)\\n        external\\n        view\\n        returns (address, address)\\n    {\\n        return IOrderbookFactory(orderbookFactory).getBaseQuote(orderbook);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IOrderbookFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.10;\\n\\ninterface IOrderbookFactory {\\n    \\n    function createBook(\\n        address bid_,\\n        address ask_,\\n        address engine_\\n    ) external returns (address orderbook);\\n\\n    function getBook(uint256 bookId_) external view returns (address orderbook);\\n\\n    function getBookByPair(address base, address quote) external view  returns (address book); \\n\\n    function getBaseQuote(address orderbook) external view returns (address base, address quote);\\n\\n    /// Address of a manager\\n    function engine() external view returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/interfaces/IOrderbook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.10;\\n\\ninterface IOrderbook {\\n    function initialize(\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) external;\\n\\n    function fpop(bool isBid, uint256 price)\\n        external\\n        returns (uint256 orderId);\\n\\n    function mktPrice() external view returns (uint256);\\n\\n    function isEmpty(bool isBid, uint256 price) external view returns (bool);\\n\\n    function getOrderDepositAmount(bool isBid, uint256 orderId) external view returns (uint256 depositAmount); \\n\\n    function placeAsk(address owner, uint256 price, uint256 amount) external;\\n\\n    function placeBid(address owner, uint256 price, uint256 amount) external;\\n\\n    function execute(uint256 orderId,\\n        bool isBid,\\n        uint256 price,\\n        address sender,\\n        uint256 amount) external;\\n\\n    function heads() external view returns (uint256 bidHead, uint256 askHead);\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.10;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AF\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TF\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TFF\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"ETF\\\");\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.10\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0xc9311588EFF89012421B18D800B1642246c886B5","bytecode":"0x60806040523480156200001157600080fd5b506200001f60003362000041565b600180546001600160a01b031916331790556103e860025560038055620000f1565b6200004d828262000051565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200004d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000ad3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f7f80620001016000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c8063817b71b0116100e3578063b82e8bbb1161008c578063d547741f11610066578063d547741f146103b4578063f46901ed146103c7578063f8a8fd6d146103da57600080fd5b8063b82e8bbb1461037b578063c4d66de81461038e578063cf842084146103a157600080fd5b8063a217fddf116100bd578063a217fddf14610357578063b5505ae91461035f578063b7d187891461037257600080fd5b8063817b71b0146102e05780638a645e45146102f357806391d148541461031357600080fd5b80632f2ff15d116101455780634fc9b3941161011f5780634fc9b3941461027a57806352f7c9881461028d5780636eff6b66146102a057600080fd5b80632f2ff15d1461024157806336568abe146102545780633c41292c1461026757600080fd5b806319a865771161017657806319a86577146101cf578063248a9ca3146101e657806327fa67381461020957600080fd5b806301ffc9a714610192578063175ddbf9146101ba575b600080fd5b6101a56101a0366004611a00565b6103fa565b60405190151581526020015b60405180910390f35b6101cd6101c8366004611a72565b610493565b005b6101d860025481565b6040519081526020016101b1565b6101d86101f4366004611ac5565b60009081526020819052604090206001015490565b61021c610217366004611ac5565b610580565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b1565b6101cd61024f366004611ade565b610616565b6101cd610262366004611ade565b610640565b6101cd610275366004611b0e565b6106f8565b6101cd610288366004611a72565b610721565b6101cd61029b366004611b54565b610803565b6102b36102ae366004611b76565b61081a565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020830152016101b1565b6101cd6102ee366004611b93565b6108bc565b60045461021c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101a5610321366004611ade565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6101d8600081565b6101cd61036d366004611b93565b610966565b6101d860035481565b6101cd610389366004611b0e565b6109ef565b6101cd61039c366004611b76565b610a10565b61021c6103af366004611bf2565b610a63565b6101cd6103c2366004611ade565b610b15565b6101cd6103d5366004611b76565b610b3a565b60055461021c9073ffffffffffffffffffffffffffffffffffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061048d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000806104a38686866001610b8d565b9150915060006104d782848860017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610be8565b90506000846104e657336104e8565b825b90506104f5878284610dc9565b60008373ffffffffffffffffffffffffffffffffffffffff166337632e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190611c20565b90506105758484836001610f39565b505050505050505050565b600480546040517fe0ff5b8b00000000000000000000000000000000000000000000000000000000815291820183905260009173ffffffffffffffffffffffffffffffffffffffff9091169063e0ff5b8b90602401602060405180830381865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d9190611c39565b60008281526020819052604090206001015461063181611060565b61063b838361106d565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146106ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106f4828261115d565b5050565b6000806107088686866000610b8d565b915091506107198183856000610f39565b505050505050565b6000806107318686866000610b8d565b91509150600061076582848860007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610be8565b90506000846107745733610776565b825b9050610783888284610dc9565b60008373ffffffffffffffffffffffffffffffffffffffff166337632e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190611c20565b90506105758484836000610f39565b600061080e81611060565b50600391909155600255565b600480546040517fc1a3ddb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116938201939093526000928392169063c1a3ddb8906024016040805180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190611c56565b91509150915091565b6000806108cc8787876000610b8d565b60055491935091506000906108fa9073ffffffffffffffffffffffffffffffffffffffff16848a8489610be8565b9050801561095c5760008461090f5733610929565b60055473ffffffffffffffffffffffffffffffffffffffff165b9050610936898284610dc9565b6005546105759073ffffffffffffffffffffffffffffffffffffffff1683886000610f39565b5050505050505050565b6000806109768787876001610b8d565b60055491935091506000906109a59073ffffffffffffffffffffffffffffffffffffffff168489600189610be8565b9050801561095c576000846109ba57336109bc565b825b90506109c9888284610dc9565b6005546105759073ffffffffffffffffffffffffffffffffffffffff1683886001610f39565b6000806109ff8686866000610b8d565b915091506107198183856001610f39565b6000610a1b81611060565b50600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600480546040517f264c780700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581169382019390935283831660248201523060448201526000928392169063264c7807906064016020604051808303816000875af1158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611c39565b949350505050565b600082815260208190526040902060010154610b3081611060565b61063b838361115d565b6000610b4581611060565b50600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080600060025460035486610ba39190611cb4565b610bad9190611cf1565b9050610bb98186611d2c565b92508315610bd257610bcd86333088611214565b610bde565b610bde87333088611214565b5094509492505050565b60008490506000808773ffffffffffffffffffffffffffffffffffffffff1663b8b238316040518163ffffffff1660e01b81526004016040805180830381865afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e9190611d43565b915091508415610d16575b600083118015610c7857508015155b8015610c845750838111155b15610d1157610c97888760018685611385565b92508773ffffffffffffffffffffffffffffffffffffffff1663b8b238316040518163ffffffff1660e01b81526004016040805180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611d43565b9092509050610c69565b610dbd565b600083118015610d2557508115155b8015610d315750838210155b15610dbd57610d44888760008686611385565b92508773ffffffffffffffffffffffffffffffffffffffff1663b8b238316040518163ffffffff1660e01b81526004016040805180830381865afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db49190611d43565b92509050610d16565b50505b95945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691610e609190611d93565b6000604051808303816000865af19150503d8060008114610e9d576040519150601f19603f3d011682016040523d82523d6000602084013e610ea2565b606091505b5091509150818015610ecc575080511580610ecc575080806020019051810190610ecc9190611daf565b610f32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f544600000000000000000000000000000000000000000000000000000000000060448201526064016106e1565b5050505050565b8015610fd1576040517fbd25b9c4000000000000000000000000000000000000000000000000000000008152336004820152602481018390526044810184905273ffffffffffffffffffffffffffffffffffffffff85169063bd25b9c490606401600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b5050505061105a565b6040517f04717aca000000000000000000000000000000000000000000000000000000008152336004820152602481018390526044810184905273ffffffffffffffffffffffffffffffffffffffff8516906304717aca90606401600060405180830381600087803b15801561104657600080fd5b505af115801561095c573d6000803e3d6000fd5b50505050565b61106a81336116e6565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106f45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556110ff3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106f45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916112b39190611d93565b6000604051808303816000865af19150503d80600081146112f0576040519150601f19603f3d011682016040523d82523d6000602084013e6112f5565b606091505b509150915081801561131f57508051158061131f57508080602001905181019061131f9190611daf565b610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f544646000000000000000000000000000000000000000000000000000000000060448201526064016106e1565b815b60008111801561142a57506040517ff6b1d5b9000000000000000000000000000000000000000000000000000000008152841560048201526024810183905273ffffffffffffffffffffffffffffffffffffffff87169063f6b1d5b990604401602060405180830381865afa158015611404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114289190611daf565b155b15610dc0576040517f733f854e000000000000000000000000000000000000000000000000000000008152841560048201526024810183905260009073ffffffffffffffffffffffffffffffffffffffff88169063733f854e906044016020604051808303816000875af11580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca9190611c20565b6040517f6c797bb6000000000000000000000000000000000000000000000000000000008152861560048201526024810182905290915060009073ffffffffffffffffffffffffffffffffffffffff891690636c797bb690604401602060405180830381865afa158015611542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115669190611c20565b9050808310156116215761157b878985610dc9565b6040517f70c7c0060000000000000000000000000000000000000000000000000000000081526004810183905286156024820152604481018590523360648201526084810184905273ffffffffffffffffffffffffffffffffffffffff8916906370c7c0069060a401600060405180830381600087803b1580156115fe57600080fd5b505af1158015611612573d6000803e3d6000fd5b50505050600092505050610dc0565b8061162d575050611387565b6116378184611d2c565b9250611644878983610dc9565b6040517f70c7c0060000000000000000000000000000000000000000000000000000000081526004810183905286156024820152604481018590523360648201526084810182905273ffffffffffffffffffffffffffffffffffffffff8916906370c7c0069060a401600060405180830381600087803b1580156116c757600080fd5b505af11580156116db573d6000803e3d6000fd5b505050505050611387565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106f45761173c8173ffffffffffffffffffffffffffffffffffffffff1660146117b6565b6117478360206117b6565b604051602001611758929190611dcc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526106e191600401611e4d565b606060006117c5836002611cb4565b6117d0906002611e9e565b67ffffffffffffffff8111156117e8576117e8611eb6565b6040519080825280601f01601f191660200182016040528015611812576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061184957611849611ee5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106118ac576118ac611ee5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006118e8846002611cb4565b6118f3906001611e9e565b90505b6001811115611990577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061193457611934611ee5565b1a60f81b82828151811061194a5761194a611ee5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361198981611f14565b90506118f6565b5083156119f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e1565b9392505050565b600060208284031215611a1257600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146119f957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461106a57600080fd5b801515811461106a57600080fd5b60008060008060808587031215611a8857600080fd5b8435611a9381611a42565b93506020850135611aa381611a42565b9250604085013591506060850135611aba81611a64565b939692955090935050565b600060208284031215611ad757600080fd5b5035919050565b60008060408385031215611af157600080fd5b823591506020830135611b0381611a42565b809150509250929050565b60008060008060808587031215611b2457600080fd5b8435611b2f81611a42565b93506020850135611b3f81611a42565b93969395505050506040820135916060013590565b60008060408385031215611b6757600080fd5b50508035926020909101359150565b600060208284031215611b8857600080fd5b81356119f981611a42565b600080600080600060a08688031215611bab57600080fd5b8535611bb681611a42565b94506020860135611bc681611a42565b935060408601359250606086013591506080860135611be481611a64565b809150509295509295909350565b60008060408385031215611c0557600080fd5b8235611c1081611a42565b91506020830135611b0381611a42565b600060208284031215611c3257600080fd5b5051919050565b600060208284031215611c4b57600080fd5b81516119f981611a42565b60008060408385031215611c6957600080fd5b8251611c7481611a42565b6020840151909250611b0381611a42565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cec57611cec611c85565b500290565b600082611d27577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611d3e57611d3e611c85565b500390565b60008060408385031215611d5657600080fd5b505080516020909101519092909150565b60005b83811015611d82578181015183820152602001611d6a565b8381111561105a5750506000910152565b60008251611da5818460208701611d67565b9190910192915050565b600060208284031215611dc157600080fd5b81516119f981611a64565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611e04816017850160208801611d67565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611e41816028840160208801611d67565b01602801949350505050565b6020815260008251806020840152611e6c816040850160208701611d67565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611eb157611eb1611c85565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081611f2357611f23611c85565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122044266474d2bae36ca3c678d4e7c6e93caa0294d521043c3f55b6f4baebb7ddba64736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061018d5760003560e01c8063817b71b0116100e3578063b82e8bbb1161008c578063d547741f11610066578063d547741f146103b4578063f46901ed146103c7578063f8a8fd6d146103da57600080fd5b8063b82e8bbb1461037b578063c4d66de81461038e578063cf842084146103a157600080fd5b8063a217fddf116100bd578063a217fddf14610357578063b5505ae91461035f578063b7d187891461037257600080fd5b8063817b71b0146102e05780638a645e45146102f357806391d148541461031357600080fd5b80632f2ff15d116101455780634fc9b3941161011f5780634fc9b3941461027a57806352f7c9881461028d5780636eff6b66146102a057600080fd5b80632f2ff15d1461024157806336568abe146102545780633c41292c1461026757600080fd5b806319a865771161017657806319a86577146101cf578063248a9ca3146101e657806327fa67381461020957600080fd5b806301ffc9a714610192578063175ddbf9146101ba575b600080fd5b6101a56101a0366004611a00565b6103fa565b60405190151581526020015b60405180910390f35b6101cd6101c8366004611a72565b610493565b005b6101d860025481565b6040519081526020016101b1565b6101d86101f4366004611ac5565b60009081526020819052604090206001015490565b61021c610217366004611ac5565b610580565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b1565b6101cd61024f366004611ade565b610616565b6101cd610262366004611ade565b610640565b6101cd610275366004611b0e565b6106f8565b6101cd610288366004611a72565b610721565b6101cd61029b366004611b54565b610803565b6102b36102ae366004611b76565b61081a565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020830152016101b1565b6101cd6102ee366004611b93565b6108bc565b60045461021c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101a5610321366004611ade565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6101d8600081565b6101cd61036d366004611b93565b610966565b6101d860035481565b6101cd610389366004611b0e565b6109ef565b6101cd61039c366004611b76565b610a10565b61021c6103af366004611bf2565b610a63565b6101cd6103c2366004611ade565b610b15565b6101cd6103d5366004611b76565b610b3a565b60055461021c9073ffffffffffffffffffffffffffffffffffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061048d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000806104a38686866001610b8d565b9150915060006104d782848860017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610be8565b90506000846104e657336104e8565b825b90506104f5878284610dc9565b60008373ffffffffffffffffffffffffffffffffffffffff166337632e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190611c20565b90506105758484836001610f39565b505050505050505050565b600480546040517fe0ff5b8b00000000000000000000000000000000000000000000000000000000815291820183905260009173ffffffffffffffffffffffffffffffffffffffff9091169063e0ff5b8b90602401602060405180830381865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d9190611c39565b60008281526020819052604090206001015461063181611060565b61063b838361106d565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146106ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106f4828261115d565b5050565b6000806107088686866000610b8d565b915091506107198183856000610f39565b505050505050565b6000806107318686866000610b8d565b91509150600061076582848860007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610be8565b90506000846107745733610776565b825b9050610783888284610dc9565b60008373ffffffffffffffffffffffffffffffffffffffff166337632e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190611c20565b90506105758484836000610f39565b600061080e81611060565b50600391909155600255565b600480546040517fc1a3ddb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116938201939093526000928392169063c1a3ddb8906024016040805180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190611c56565b91509150915091565b6000806108cc8787876000610b8d565b60055491935091506000906108fa9073ffffffffffffffffffffffffffffffffffffffff16848a8489610be8565b9050801561095c5760008461090f5733610929565b60055473ffffffffffffffffffffffffffffffffffffffff165b9050610936898284610dc9565b6005546105759073ffffffffffffffffffffffffffffffffffffffff1683886000610f39565b5050505050505050565b6000806109768787876001610b8d565b60055491935091506000906109a59073ffffffffffffffffffffffffffffffffffffffff168489600189610be8565b9050801561095c576000846109ba57336109bc565b825b90506109c9888284610dc9565b6005546105759073ffffffffffffffffffffffffffffffffffffffff1683886001610f39565b6000806109ff8686866000610b8d565b915091506107198183856001610f39565b6000610a1b81611060565b50600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600480546040517f264c780700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581169382019390935283831660248201523060448201526000928392169063264c7807906064016020604051808303816000875af1158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611c39565b949350505050565b600082815260208190526040902060010154610b3081611060565b61063b838361115d565b6000610b4581611060565b50600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080600060025460035486610ba39190611cb4565b610bad9190611cf1565b9050610bb98186611d2c565b92508315610bd257610bcd86333088611214565b610bde565b610bde87333088611214565b5094509492505050565b60008490506000808773ffffffffffffffffffffffffffffffffffffffff1663b8b238316040518163ffffffff1660e01b81526004016040805180830381865afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e9190611d43565b915091508415610d16575b600083118015610c7857508015155b8015610c845750838111155b15610d1157610c97888760018685611385565b92508773ffffffffffffffffffffffffffffffffffffffff1663b8b238316040518163ffffffff1660e01b81526004016040805180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611d43565b9092509050610c69565b610dbd565b600083118015610d2557508115155b8015610d315750838210155b15610dbd57610d44888760008686611385565b92508773ffffffffffffffffffffffffffffffffffffffff1663b8b238316040518163ffffffff1660e01b81526004016040805180830381865afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db49190611d43565b92509050610d16565b50505b95945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691610e609190611d93565b6000604051808303816000865af19150503d8060008114610e9d576040519150601f19603f3d011682016040523d82523d6000602084013e610ea2565b606091505b5091509150818015610ecc575080511580610ecc575080806020019051810190610ecc9190611daf565b610f32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f544600000000000000000000000000000000000000000000000000000000000060448201526064016106e1565b5050505050565b8015610fd1576040517fbd25b9c4000000000000000000000000000000000000000000000000000000008152336004820152602481018390526044810184905273ffffffffffffffffffffffffffffffffffffffff85169063bd25b9c490606401600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b5050505061105a565b6040517f04717aca000000000000000000000000000000000000000000000000000000008152336004820152602481018390526044810184905273ffffffffffffffffffffffffffffffffffffffff8516906304717aca90606401600060405180830381600087803b15801561104657600080fd5b505af115801561095c573d6000803e3d6000fd5b50505050565b61106a81336116e6565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106f45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556110ff3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106f45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916112b39190611d93565b6000604051808303816000865af19150503d80600081146112f0576040519150601f19603f3d011682016040523d82523d6000602084013e6112f5565b606091505b509150915081801561131f57508051158061131f57508080602001905181019061131f9190611daf565b610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f544646000000000000000000000000000000000000000000000000000000000060448201526064016106e1565b815b60008111801561142a57506040517ff6b1d5b9000000000000000000000000000000000000000000000000000000008152841560048201526024810183905273ffffffffffffffffffffffffffffffffffffffff87169063f6b1d5b990604401602060405180830381865afa158015611404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114289190611daf565b155b15610dc0576040517f733f854e000000000000000000000000000000000000000000000000000000008152841560048201526024810183905260009073ffffffffffffffffffffffffffffffffffffffff88169063733f854e906044016020604051808303816000875af11580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca9190611c20565b6040517f6c797bb6000000000000000000000000000000000000000000000000000000008152861560048201526024810182905290915060009073ffffffffffffffffffffffffffffffffffffffff891690636c797bb690604401602060405180830381865afa158015611542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115669190611c20565b9050808310156116215761157b878985610dc9565b6040517f70c7c0060000000000000000000000000000000000000000000000000000000081526004810183905286156024820152604481018590523360648201526084810184905273ffffffffffffffffffffffffffffffffffffffff8916906370c7c0069060a401600060405180830381600087803b1580156115fe57600080fd5b505af1158015611612573d6000803e3d6000fd5b50505050600092505050610dc0565b8061162d575050611387565b6116378184611d2c565b9250611644878983610dc9565b6040517f70c7c0060000000000000000000000000000000000000000000000000000000081526004810183905286156024820152604481018590523360648201526084810182905273ffffffffffffffffffffffffffffffffffffffff8916906370c7c0069060a401600060405180830381600087803b1580156116c757600080fd5b505af11580156116db573d6000803e3d6000fd5b505050505050611387565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106f45761173c8173ffffffffffffffffffffffffffffffffffffffff1660146117b6565b6117478360206117b6565b604051602001611758929190611dcc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526106e191600401611e4d565b606060006117c5836002611cb4565b6117d0906002611e9e565b67ffffffffffffffff8111156117e8576117e8611eb6565b6040519080825280601f01601f191660200182016040528015611812576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061184957611849611ee5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106118ac576118ac611ee5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006118e8846002611cb4565b6118f3906001611e9e565b90505b6001811115611990577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061193457611934611ee5565b1a60f81b82828151811061194a5761194a611ee5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361198981611f14565b90506118f6565b5083156119f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e1565b9392505050565b600060208284031215611a1257600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146119f957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461106a57600080fd5b801515811461106a57600080fd5b60008060008060808587031215611a8857600080fd5b8435611a9381611a42565b93506020850135611aa381611a42565b9250604085013591506060850135611aba81611a64565b939692955090935050565b600060208284031215611ad757600080fd5b5035919050565b60008060408385031215611af157600080fd5b823591506020830135611b0381611a42565b809150509250929050565b60008060008060808587031215611b2457600080fd5b8435611b2f81611a42565b93506020850135611b3f81611a42565b93969395505050506040820135916060013590565b60008060408385031215611b6757600080fd5b50508035926020909101359150565b600060208284031215611b8857600080fd5b81356119f981611a42565b600080600080600060a08688031215611bab57600080fd5b8535611bb681611a42565b94506020860135611bc681611a42565b935060408601359250606086013591506080860135611be481611a64565b809150509295509295909350565b60008060408385031215611c0557600080fd5b8235611c1081611a42565b91506020830135611b0381611a42565b600060208284031215611c3257600080fd5b5051919050565b600060208284031215611c4b57600080fd5b81516119f981611a42565b60008060408385031215611c6957600080fd5b8251611c7481611a42565b6020840151909250611b0381611a42565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cec57611cec611c85565b500290565b600082611d27577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611d3e57611d3e611c85565b500390565b60008060408385031215611d5657600080fd5b505080516020909101519092909150565b60005b83811015611d82578181015183820152602001611d6a565b8381111561105a5750506000910152565b60008251611da5818460208701611d67565b9190910192915050565b600060208284031215611dc157600080fd5b81516119f981611a64565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611e04816017850160208801611d67565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611e41816028840160208801611d67565b01602801949350505050565b6020815260008251806020840152611e6c816040850160208701611d67565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611eb157611eb1611c85565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081611f2357611f23611c85565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122044266474d2bae36ca3c678d4e7c6e93caa0294d521043c3f55b6f4baebb7ddba64736f6c634300080a0033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"}],"name":"addPair","outputs":[{"internalType":"address","name":"book","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeDenom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeNum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getOrderbook","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"orderbook","type":"address"}],"name":"getOrderbookBaseQuote","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"orderbook_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"at","type":"uint256"},{"internalType":"bool","name":"isStop","type":"bool"}],"name":"limitBuy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"at","type":"uint256"},{"internalType":"bool","name":"isStop","type":"bool"}],"name":"limitSell","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"isStop","type":"bool"}],"name":"marketBuy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"isStop","type":"bool"}],"name":"marketSell","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"orderbookFactory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"feeNum_","type":"uint256"},{"internalType":"uint256","name":"feeDenom_","type":"uint256"}],"name":"setFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"feeTo_","type":"address"}],"name":"setFeeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"at","type":"uint256"}],"name":"stopBuy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"at","type":"uint256"}],"name":"stopSell","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"test","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}